{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0","program":"/home/aprokruov/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","parking_lot","--edition=2018","/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=70ffb36e213ddeda","-C","extra-filename=-70ffb36e213ddeda","--out-dir","/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps","-L","dependency=/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps","--extern","lock_api=/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps/liblock_api-769e8ddc3fd5e3d1.rmeta","--extern","parking_lot_core=/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps/libparking_lot_core-d3b167065e5ba203.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/aprokruov/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps/libparking_lot-70ffb36e213ddeda.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[14914047164467508322,12477663510858069174]},"crate_root":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src","external_crates":[{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6973778690192336139,8142209516217857463]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":2,"id":{"name":"core","disambiguator":[15592741845567276740,3156031529314222720]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13374244477361630302,7769620793786617884]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3975653617116332831,3246029778383962529]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4002864349786603122,6968583043156664114]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2197952863798108466,12954741518784284558]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17879148990353707291,7418933275643868066]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3276269728816119501,10713683943356502313]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9079514192688056085,2066675484243544940]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16656037810060450616,6984372355409432805]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[10343442030709247650,15432214668922181955]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8026872218837247361,15230076463643633766]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12520459420306099037,15485725811231898325]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[735938503203299375,12161991909907012778]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":15,"id":{"name":"lock_api","disambiguator":[7467223425980433337,18438449482621443306]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":16,"id":{"name":"scopeguard","disambiguator":[5628241028486987406,10006265356593446159]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":17,"id":{"name":"parking_lot_core","disambiguator":[8792824187159737361,12932645006814232238]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":18,"id":{"name":"smallvec","disambiguator":[6115824308458309681,9242794588610799436]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":19,"id":{"name":"cfg_if","disambiguator":[13900420120932326570,12022887535187153700]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","num":20,"id":{"name":"libc","disambiguator":[8980724010661236708,16271250266057723840]}}],"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":333,"byte_end":1386,"line_start":8,"line_end":43,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":906,"byte_end":913,"line_start":31,"line_end":31,"column_start":25,"column_end":32},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":915,"byte_end":932,"line_start":31,"line_end":31,"column_start":34,"column_end":51},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":75},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":957,"byte_end":973,"line_start":32,"line_end":32,"column_start":23,"column_end":39},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":975,"byte_end":980,"line_start":32,"line_end":32,"column_start":41,"column_end":46},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":982,"byte_end":992,"line_start":32,"line_end":32,"column_start":48,"column_end":58},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":99},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1016,"byte_end":1020,"line_start":33,"line_end":33,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":400},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1022,"byte_end":1031,"line_start":33,"line_end":33,"column_start":28,"column_end":37},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1059,"byte_end":1067,"line_start":34,"line_end":34,"column_start":26,"column_end":34},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1095,"byte_end":1104,"line_start":35,"line_end":35,"column_start":27,"column_end":36},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1135,"byte_end":1160,"line_start":37,"line_end":37,"column_start":5,"column_end":30},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1162,"byte_end":1173,"line_start":37,"line_end":37,"column_start":32,"column_end":43},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":316},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1175,"byte_end":1189,"line_start":37,"line_end":37,"column_start":45,"column_end":59},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1191,"byte_end":1210,"line_start":37,"line_end":37,"column_start":61,"column_end":80},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":335},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1243,"byte_end":1264,"line_start":40,"line_end":40,"column_start":5,"column_end":26},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":338},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1266,"byte_end":1288,"line_start":40,"line_end":40,"column_start":28,"column_end":50},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1290,"byte_end":1296,"line_start":40,"line_end":40,"column_start":52,"column_end":58},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1298,"byte_end":1313,"line_start":40,"line_end":40,"column_start":60,"column_end":75},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":341},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1319,"byte_end":1344,"line_start":41,"line_end":41,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1346,"byte_end":1362,"line_start":41,"line_end":41,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":0},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":1377,"byte_end":1385,"line_start":43,"line_end":43,"column_start":11,"column_end":19},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":333,"byte_end":1386,"line_start":8,"line_end":43,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":56},{"krate":0,"index":67},{"krate":0,"index":78},{"krate":0,"index":126},{"krate":0,"index":176},{"krate":0,"index":304},{"krate":0,"index":324},{"krate":0,"index":344},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":377},{"krate":0,"index":384}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"! This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"! `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"! standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/lib.rs","byte_start":576,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":385},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2236,"byte_end":2253,"line_start":22,"line_end":22,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2074,"byte_end":2149,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2150,"byte_end":2179,"line_start":20,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2374,"byte_end":2383,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2291,"byte_end":2348,"line_start":25,"line_end":25,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2353,"byte_end":2362,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4779,"byte_end":4786,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":31}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2424,"byte_end":2448,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2449,"byte_end":2452,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2453,"byte_end":2529,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2530,"byte_end":2601,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2602,"byte_end":2679,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2680,"byte_end":2756,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2757,"byte_end":2796,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2797,"byte_end":2800,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2801,"byte_end":2876,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2877,"byte_end":2951,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2952,"byte_end":3028,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3029,"byte_end":3105,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3106,"byte_end":3182,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3183,"byte_end":3210,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3211,"byte_end":3214,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3215,"byte_end":3268,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3269,"byte_end":3272,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3273,"byte_end":3350,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3351,"byte_end":3402,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3403,"byte_end":3478,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3479,"byte_end":3555,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3556,"byte_end":3571,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3572,"byte_end":3647,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3648,"byte_end":3692,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3693,"byte_end":3771,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3772,"byte_end":3822,"line_start":57,"line_end":57,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3823,"byte_end":3871,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3872,"byte_end":3875,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3876,"byte_end":3890,"line_start":60,"line_end":60,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3891,"byte_end":3894,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3895,"byte_end":3902,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3903,"byte_end":3941,"line_start":63,"line_end":63,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3942,"byte_end":3965,"line_start":64,"line_end":64,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3966,"byte_end":3986,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3987,"byte_end":3990,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":3991,"byte_end":4052,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4053,"byte_end":4082,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4083,"byte_end":4086,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4087,"byte_end":4163,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4164,"byte_end":4190,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4191,"byte_end":4235,"line_start":72,"line_end":72,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4236,"byte_end":4274,"line_start":73,"line_end":73,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4275,"byte_end":4299,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4300,"byte_end":4326,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4327,"byte_end":4334,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4335,"byte_end":4338,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4339,"byte_end":4377,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4378,"byte_end":4417,"line_start":79,"line_end":79,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4418,"byte_end":4452,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ if !*started {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4453,"byte_end":4471,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4472,"byte_end":4504,"line_start":82,"line_end":82,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4505,"byte_end":4510,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/ // Note that we used and if instead of a while loop above. This is only","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4511,"byte_end":4586,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/ // possible because parking_lot's Condvar will never spuriously wake up.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4587,"byte_end":4663,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ // This means that wait() will only return after notify_one or notify_all is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4664,"byte_end":4744,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ // called.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4745,"byte_end":4759,"line_start":87,"line_end":87,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4760,"byte_end":4767,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4964,"byte_end":4967,"line_start":97,"line_end":97,"column_start":18,"column_end":21},"name":"new","qualname":"<Condvar>::new","value":"fn () -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4843,"byte_end":4914,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4919,"byte_end":4932,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4937,"byte_end":4946,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5793,"byte_end":5803,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5074,"byte_end":5122,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5127,"byte_end":5130,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Returns whether a thread was woken up.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5135,"byte_end":5177,"line_start":105,"line_end":105,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5182,"byte_end":5185,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5190,"byte_end":5263,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5268,"byte_end":5335,"line_start":108,"line_end":108,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5340,"byte_end":5385,"line_start":109,"line_end":109,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5390,"byte_end":5393,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5398,"byte_end":5445,"line_start":111,"line_end":111,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5450,"byte_end":5453,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5458,"byte_end":5472,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5477,"byte_end":5480,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5485,"byte_end":5492,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Condvar;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5497,"byte_end":5526,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5531,"byte_end":5534,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let condvar = Condvar::new();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5539,"byte_end":5572,"line_start":118,"line_end":118,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5577,"byte_end":5580,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // do something with condvar, share it with other threads","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5585,"byte_end":5646,"line_start":120,"line_end":120,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5651,"byte_end":5654,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ if !condvar.notify_one() {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5659,"byte_end":5689,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/     println!(\"Nobody was listening for this.\");","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5694,"byte_end":5745,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5750,"byte_end":5755,"line_start":124,"line_end":124,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5760,"byte_end":5767,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":5772,"byte_end":5781,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8256,"byte_end":8266,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":7889,"byte_end":7938,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":7943,"byte_end":7946,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Returns the number of threads woken up.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":7951,"byte_end":7994,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":7999,"byte_end":8002,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8007,"byte_end":8076,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8081,"byte_end":8153,"line_start":183,"line_end":183,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8158,"byte_end":8166,"line_start":184,"line_end":184,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8171,"byte_end":8174,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8179,"byte_end":8230,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":8235,"byte_end":8244,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11279,"byte_end":11283,"line_start":258,"line_end":258,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10630,"byte_end":10700,"line_start":244,"line_end":244,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10705,"byte_end":10722,"line_start":245,"line_end":245,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10727,"byte_end":10730,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10735,"byte_end":10811,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10816,"byte_end":10890,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10895,"byte_end":10969,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":10974,"byte_end":11049,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11054,"byte_end":11100,"line_start":251,"line_end":251,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11105,"byte_end":11108,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11113,"byte_end":11125,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11130,"byte_end":11133,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11138,"byte_end":11212,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11217,"byte_end":11253,"line_start":256,"line_end":256,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11258,"byte_end":11267,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12558,"byte_end":12568,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>, timeout: Instant) -> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11441,"byte_end":11514,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11519,"byte_end":11550,"line_start":263,"line_end":263,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11555,"byte_end":11558,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11563,"byte_end":11636,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11641,"byte_end":11712,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11717,"byte_end":11790,"line_start":267,"line_end":267,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11795,"byte_end":11864,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11869,"byte_end":11921,"line_start":269,"line_end":269,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11926,"byte_end":11929,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":11934,"byte_end":12005,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12010,"byte_end":12086,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12091,"byte_end":12111,"line_start":273,"line_end":273,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12116,"byte_end":12119,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12124,"byte_end":12194,"line_start":275,"line_end":275,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12199,"byte_end":12225,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12230,"byte_end":12233,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12238,"byte_end":12312,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12317,"byte_end":12379,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12384,"byte_end":12387,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12392,"byte_end":12404,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12409,"byte_end":12412,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12417,"byte_end":12491,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12496,"byte_end":12532,"line_start":284,"line_end":284,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":12537,"byte_end":12546,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16962,"byte_end":16970,"line_start":390,"line_end":390,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>, timeout: Duration) -> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15712,"byte_end":15787,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15792,"byte_end":15815,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15820,"byte_end":15823,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15828,"byte_end":15901,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15906,"byte_end":15979,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":15984,"byte_end":16057,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16062,"byte_end":16131,"line_start":371,"line_end":371,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16136,"byte_end":16188,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16193,"byte_end":16196,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16201,"byte_end":16272,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16277,"byte_end":16353,"line_start":375,"line_end":375,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16358,"byte_end":16378,"line_start":376,"line_end":376,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16383,"byte_end":16386,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16391,"byte_end":16461,"line_start":378,"line_end":378,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16466,"byte_end":16492,"line_start":379,"line_end":379,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16497,"byte_end":16500,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16505,"byte_end":16579,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16584,"byte_end":16646,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16651,"byte_end":16654,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16659,"byte_end":16671,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16676,"byte_end":16679,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ Panics if the given `timeout` is so large that it can't be added to the current time.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16684,"byte_end":16773,"line_start":386,"line_end":386,"column_start":5,"column_end":94}},{"value":"/ This panic is not possible if the crate is built with the `nightly` feature, then a too","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16778,"byte_end":16869,"line_start":387,"line_end":387,"column_start":5,"column_end":96}},{"value":"/ large `timeout` becomes equivalent to just calling `wait`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16874,"byte_end":16936,"line_start":388,"line_end":388,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":16941,"byte_end":16950,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":59},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/elision.rs","byte_start":37059,"byte_end":37066,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43934,"byte_end":43939,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40542,"byte_end":40608,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40609,"byte_end":40612,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40613,"byte_end":40692,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40693,"byte_end":40760,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40761,"byte_end":40840,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40841,"byte_end":40916,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40917,"byte_end":40996,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":40997,"byte_end":41040,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41041,"byte_end":41044,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41045,"byte_end":41059,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41060,"byte_end":41063,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41064,"byte_end":41143,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41144,"byte_end":41224,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves performance","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41225,"byte_end":41304,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41305,"byte_end":41384,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41385,"byte_end":41449,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41450,"byte_end":41453,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41454,"byte_end":41535,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41536,"byte_end":41607,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41608,"byte_end":41686,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41687,"byte_end":41764,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41765,"byte_end":41768,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41769,"byte_end":41846,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41847,"byte_end":41926,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41927,"byte_end":41952,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41953,"byte_end":41956,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":41957,"byte_end":42035,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42036,"byte_end":42102,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42103,"byte_end":42106,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42107,"byte_end":42158,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42159,"byte_end":42162,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42163,"byte_end":42222,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42223,"byte_end":42298,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42299,"byte_end":42341,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42342,"byte_end":42420,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42421,"byte_end":42471,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42472,"byte_end":42520,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42521,"byte_end":42590,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42591,"byte_end":42644,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42645,"byte_end":42715,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42716,"byte_end":42799,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42800,"byte_end":42803,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42804,"byte_end":42818,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42819,"byte_end":42822,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42823,"byte_end":42830,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42831,"byte_end":42854,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42855,"byte_end":42882,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42883,"byte_end":42903,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42904,"byte_end":42937,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42938,"byte_end":42941,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42942,"byte_end":42966,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42967,"byte_end":42970,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":42971,"byte_end":43050,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43051,"byte_end":43112,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43113,"byte_end":43119,"line_start":65,"line_end":65,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43120,"byte_end":43201,"line_start":66,"line_end":66,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43202,"byte_end":43243,"line_start":67,"line_end":67,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43244,"byte_end":43283,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43284,"byte_end":43287,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43288,"byte_end":43317,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43318,"byte_end":43338,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43339,"byte_end":43396,"line_start":72,"line_end":72,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43397,"byte_end":43428,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43429,"byte_end":43504,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43505,"byte_end":43582,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43583,"byte_end":43654,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43655,"byte_end":43694,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43695,"byte_end":43718,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43719,"byte_end":43746,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43747,"byte_end":43784,"line_start":80,"line_end":80,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43785,"byte_end":43798,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43799,"byte_end":43870,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43871,"byte_end":43882,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43883,"byte_end":43888,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43889,"byte_end":43892,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43893,"byte_end":43916,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43917,"byte_end":43924,"line_start":87,"line_end":87,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44254,"byte_end":44264,"line_start":95,"line_end":95,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard<'a, RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":43976,"byte_end":44056,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44057,"byte_end":44117,"line_start":91,"line_end":91,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44118,"byte_end":44121,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44122,"byte_end":44200,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44201,"byte_end":44244,"line_start":94,"line_end":94,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44688,"byte_end":44704,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard<'a, RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44314,"byte_end":44389,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44390,"byte_end":44425,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44426,"byte_end":44429,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44430,"byte_end":44509,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44510,"byte_end":44585,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44586,"byte_end":44666,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/mutex.rs","byte_start":44667,"byte_end":44678,"line_start":103,"line_end":103,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50788,"byte_end":50791,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50744,"byte_end":50783,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":403},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50843,"byte_end":50851,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50798,"byte_end":50838,"line_start":26,"line_end":26,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50909,"byte_end":50919,"line_start":30,"line_end":30,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50858,"byte_end":50904,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50972,"byte_end":50976,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" A closure has completed successfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed successfully.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50926,"byte_end":50967,"line_start":32,"line_end":32,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":400},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50728,"byte_end":50737,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"OnceState::{New, Poisoned, InProgress, Done}","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50643,"byte_end":50673,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51256,"byte_end":51264,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51002,"byte_end":51062,"line_start":37,"line_end":37,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51067,"byte_end":51070,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Once an initialization routine for a `Once` has panicked it will forever","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51075,"byte_end":51151,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51156,"byte_end":51230,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51235,"byte_end":51244,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51500,"byte_end":51504,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfully executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfully executed a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51388,"byte_end":51457,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ closure.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51462,"byte_end":51474,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51479,"byte_end":51488,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":99},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52325,"byte_end":52329,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51622,"byte_end":51689,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51690,"byte_end":51764,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51765,"byte_end":51791,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51792,"byte_end":51795,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51796,"byte_end":51846,"line_start":64,"line_end":64,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51847,"byte_end":51850,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51851,"byte_end":51906,"line_start":66,"line_end":66,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51907,"byte_end":51942,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":51943,"byte_end":52022,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52023,"byte_end":52063,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52064,"byte_end":52133,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52134,"byte_end":52137,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52138,"byte_end":52152,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52153,"byte_end":52156,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52157,"byte_end":52164,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52165,"byte_end":52191,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52192,"byte_end":52195,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ static START: Once = Once::new();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52196,"byte_end":52233,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52234,"byte_end":52237,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52238,"byte_end":52262,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52263,"byte_end":52297,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52298,"byte_end":52305,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52306,"byte_end":52313,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52421,"byte_end":52424,"line_start":88,"line_end":88,"column_start":18,"column_end":21},"name":"new","qualname":"<Once>::new","value":"fn () -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52358,"byte_end":52389,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52394,"byte_end":52403,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52550,"byte_end":52555,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"fn (&self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52479,"byte_end":52524,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52529,"byte_end":52538,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54828,"byte_end":54837,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"fn <F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52912,"byte_end":52988,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52993,"byte_end":53068,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53073,"byte_end":53125,"line_start":109,"line_end":109,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53130,"byte_end":53133,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53138,"byte_end":53209,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53214,"byte_end":53247,"line_start":112,"line_end":112,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53252,"byte_end":53255,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53260,"byte_end":53333,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53338,"byte_end":53413,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53418,"byte_end":53493,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53498,"byte_end":53565,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53570,"byte_end":53646,"line_start":118,"line_end":118,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53651,"byte_end":53663,"line_start":119,"line_end":119,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53668,"byte_end":53671,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53676,"byte_end":53690,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53695,"byte_end":53698,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53703,"byte_end":53710,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53715,"byte_end":53741,"line_start":124,"line_end":124,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53746,"byte_end":53749,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53754,"byte_end":53784,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = Once::new();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53789,"byte_end":53825,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53830,"byte_end":53833,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53838,"byte_end":53913,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53918,"byte_end":53991,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":53996,"byte_end":54014,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54019,"byte_end":54025,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54030,"byte_end":54104,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54109,"byte_end":54185,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54190,"byte_end":54224,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54229,"byte_end":54245,"line_start":136,"line_end":136,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54250,"byte_end":54281,"line_start":137,"line_end":137,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54286,"byte_end":54332,"line_start":138,"line_end":138,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54337,"byte_end":54352,"line_start":139,"line_end":139,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54357,"byte_end":54372,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54377,"byte_end":54386,"line_start":141,"line_end":141,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54391,"byte_end":54396,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54401,"byte_end":54404,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54409,"byte_end":54450,"line_start":144,"line_end":144,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54455,"byte_end":54469,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54474,"byte_end":54481,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54486,"byte_end":54491,"line_start":147,"line_end":147,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54496,"byte_end":54503,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54508,"byte_end":54511,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54516,"byte_end":54528,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54533,"byte_end":54536,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54541,"byte_end":54605,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54610,"byte_end":54686,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54691,"byte_end":54767,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54772,"byte_end":54802,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":54807,"byte_end":54816,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55588,"byte_end":55603,"line_start":179,"line_end":179,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"fn <F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55105,"byte_end":55176,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55181,"byte_end":55184,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55189,"byte_end":55261,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55266,"byte_end":55341,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55346,"byte_end":55382,"line_start":173,"line_end":173,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55387,"byte_end":55390,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55395,"byte_end":55468,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55473,"byte_end":55548,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55553,"byte_end":55562,"line_start":177,"line_end":177,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":55567,"byte_end":55576,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":65338,"byte_end":65346,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":151}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw mutex type backed by the parking lot.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":65281,"byte_end":65326,"line_start":31,"line_end":31,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":78182,"byte_end":78191,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":215}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw reader-writer lock type backed by the parking lot.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":78112,"byte_end":78170,"line_start":54,"line_end":54,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":113875,"byte_end":113886,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[{"value":"/ Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":113786,"byte_end":113863,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":316},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114959,"byte_end":114973,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114486,"byte_end":114549,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114550,"byte_end":114553,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114554,"byte_end":114624,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114625,"byte_end":114628,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114629,"byte_end":114709,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114710,"byte_end":114728,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114729,"byte_end":114809,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114810,"byte_end":114849,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114850,"byte_end":114853,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114854,"byte_end":114934,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":114935,"byte_end":114949,"line_start":40,"line_end":40,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115304,"byte_end":115323,"line_start":48,"line_end":48,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard<'a, RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115032,"byte_end":115119,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115120,"byte_end":115183,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115184,"byte_end":115187,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115188,"byte_end":115266,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115267,"byte_end":115294,"line_start":47,"line_end":47,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":321},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115796,"byte_end":115821,"line_start":57,"line_end":57,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard<'a, RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115395,"byte_end":115479,"line_start":50,"line_end":50,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115480,"byte_end":115515,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115516,"byte_end":115519,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115520,"byte_end":115617,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115618,"byte_end":115693,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115694,"byte_end":115774,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":115775,"byte_end":115786,"line_start":56,"line_end":56,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":327},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121878,"byte_end":121884,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118319,"byte_end":118343,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118344,"byte_end":118347,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118348,"byte_end":118425,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118426,"byte_end":118505,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118506,"byte_end":118585,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118586,"byte_end":118644,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118645,"byte_end":118648,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118649,"byte_end":118723,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118724,"byte_end":118802,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118803,"byte_end":118883,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118884,"byte_end":118958,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":118959,"byte_end":119011,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119012,"byte_end":119015,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119016,"byte_end":119093,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119094,"byte_end":119174,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119175,"byte_end":119253,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119254,"byte_end":119332,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119333,"byte_end":119382,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119383,"byte_end":119386,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119387,"byte_end":119401,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119402,"byte_end":119405,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119406,"byte_end":119485,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119486,"byte_end":119565,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves performance","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119566,"byte_end":119646,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119647,"byte_end":119726,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119727,"byte_end":119792,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119793,"byte_end":119796,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119797,"byte_end":119879,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119880,"byte_end":119951,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":119952,"byte_end":120030,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120031,"byte_end":120109,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120110,"byte_end":120113,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120114,"byte_end":120191,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120192,"byte_end":120271,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120272,"byte_end":120297,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120298,"byte_end":120301,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120302,"byte_end":120380,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120381,"byte_end":120460,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120461,"byte_end":120484,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120485,"byte_end":120488,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120489,"byte_end":120541,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120542,"byte_end":120545,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120546,"byte_end":120614,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120615,"byte_end":120689,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120690,"byte_end":120749,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120750,"byte_end":120825,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120826,"byte_end":120869,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120870,"byte_end":120948,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":120949,"byte_end":120999,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121000,"byte_end":121048,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121049,"byte_end":121118,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121119,"byte_end":121172,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121173,"byte_end":121244,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121245,"byte_end":121302,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121303,"byte_end":121376,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121377,"byte_end":121380,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121381,"byte_end":121395,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121396,"byte_end":121399,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121400,"byte_end":121407,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121408,"byte_end":121436,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121437,"byte_end":121440,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121441,"byte_end":121471,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121472,"byte_end":121475,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121476,"byte_end":121520,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121521,"byte_end":121526,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121527,"byte_end":121556,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121557,"byte_end":121586,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121587,"byte_end":121614,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121615,"byte_end":121642,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121643,"byte_end":121688,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121689,"byte_end":121692,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121693,"byte_end":121740,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121741,"byte_end":121746,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121747,"byte_end":121780,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121781,"byte_end":121797,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121798,"byte_end":121824,"line_start":86,"line_end":86,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121825,"byte_end":121860,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121861,"byte_end":121868,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":329},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122018,"byte_end":122033,"line_start":93,"line_end":93,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121923,"byte_end":121995,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":121996,"byte_end":122008,"line_start":92,"line_end":92,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":332},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122188,"byte_end":122204,"line_start":97,"line_end":97,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122089,"byte_end":122165,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122166,"byte_end":122178,"line_start":96,"line_end":96,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":335},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122654,"byte_end":122675,"line_start":106,"line_end":106,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122261,"byte_end":122345,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122346,"byte_end":122381,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122382,"byte_end":122385,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122386,"byte_end":122475,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122476,"byte_end":122551,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122552,"byte_end":122632,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122633,"byte_end":122644,"line_start":105,"line_end":105,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":338},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123134,"byte_end":123156,"line_start":115,"line_end":115,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122737,"byte_end":122823,"line_start":108,"line_end":108,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122824,"byte_end":122859,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122860,"byte_end":122863,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122864,"byte_end":122955,"line_start":111,"line_end":111,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":122956,"byte_end":123031,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123032,"byte_end":123112,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123113,"byte_end":123124,"line_start":114,"line_end":114,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":341},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123318,"byte_end":123343,"line_start":119,"line_end":119,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123219,"byte_end":123295,"line_start":117,"line_end":117,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/rwlock.rs","byte_start":123296,"byte_end":123308,"line_start":118,"line_end":118,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2267,"byte_end":2284,"line_start":24,"line_end":24,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4829,"byte_end":4836,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":17268,"byte_end":17275,"line_start":400,"line_end":400,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":17374,"byte_end":17381,"line_start":407,"line_end":407,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/elision.rs","byte_start":37847,"byte_end":37858,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50986,"byte_end":50995,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52347,"byte_end":52351,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":59442,"byte_end":59452,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":60694,"byte_end":60698,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":60791,"byte_end":60795,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":67169,"byte_end":67177,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":68618,"byte_end":68626,"line_start":113,"line_end":113,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":69153,"byte_end":69161,"line_start":135,"line_end":135,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":70152,"byte_end":70160,"line_start":174,"line_end":174,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":78257,"byte_end":78266,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":80340,"byte_end":80349,"line_start":142,"line_end":142,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":81254,"byte_end":81263,"line_start":179,"line_end":179,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":81624,"byte_end":81633,"line_start":193,"line_end":193,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":83300,"byte_end":83309,"line_start":258,"line_end":258,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":83907,"byte_end":83916,"line_start":282,"line_end":282,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":84658,"byte_end":84667,"line_start":310,"line_end":310,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":86549,"byte_end":86558,"line_start":385,"line_end":385,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":87393,"byte_end":87402,"line_start":415,"line_end":415,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":88091,"byte_end":88100,"line_start":440,"line_end":440,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":89504,"byte_end":89513,"line_start":494,"line_end":494,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":292},{"krate":0,"index":297},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":113917,"byte_end":113928,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/util.rs","byte_start":136445,"byte_end":136451,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":2267,"byte_end":2284,"line_start":24,"line_end":24,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":4829,"byte_end":4836,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":30},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":17268,"byte_end":17275,"line_start":400,"line_end":400,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/condvar.rs","byte_start":17374,"byte_end":17381,"line_start":407,"line_end":407,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/elision.rs","byte_start":37847,"byte_end":37858,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":29608},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":50986,"byte_end":50995,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":52347,"byte_end":52351,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":59442,"byte_end":59452,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":60694,"byte_end":60698,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":99},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/once.rs","byte_start":60791,"byte_end":60795,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":99},"to":{"krate":2,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":67169,"byte_end":67177,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":150},"to":{"krate":15,"index":19}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":68618,"byte_end":68626,"line_start":113,"line_end":113,"column_start":40,"column_end":48},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":150},"to":{"krate":15,"index":25}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":69153,"byte_end":69161,"line_start":135,"line_end":135,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":150},"to":{"krate":15,"index":28}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_mutex.rs","byte_start":70152,"byte_end":70160,"line_start":174,"line_end":174,"column_start":6,"column_end":14},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":78257,"byte_end":78266,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":436}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":80340,"byte_end":80349,"line_start":142,"line_end":142,"column_start":41,"column_end":50},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":445}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":81254,"byte_end":81263,"line_start":179,"line_end":179,"column_start":46,"column_end":55},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":450}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":81624,"byte_end":81633,"line_start":193,"line_end":193,"column_start":42,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":452}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":83300,"byte_end":83309,"line_start":258,"line_end":258,"column_start":46,"column_end":55},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":459}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":83907,"byte_end":83916,"line_start":282,"line_end":282,"column_start":51,"column_end":60},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":462}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":84658,"byte_end":84667,"line_start":310,"line_end":310,"column_start":44,"column_end":53},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":465}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":86549,"byte_end":86558,"line_start":385,"line_end":385,"column_start":48,"column_end":57},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":471}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":87393,"byte_end":87402,"line_start":415,"line_end":415,"column_start":53,"column_end":62},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":474}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":88091,"byte_end":88100,"line_start":440,"line_end":440,"column_start":49,"column_end":58},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":214},"to":{"krate":15,"index":477}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/raw_rwlock.rs","byte_start":89504,"byte_end":89513,"line_start":494,"line_end":494,"column_start":6,"column_end":15},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/remutex.rs","byte_start":113917,"byte_end":113928,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":310},"to":{"krate":15,"index":218}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.10.0/src/util.rs","byte_start":136445,"byte_end":136451,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":2,"index":29110},"to":{"krate":0,"index":348}}]}