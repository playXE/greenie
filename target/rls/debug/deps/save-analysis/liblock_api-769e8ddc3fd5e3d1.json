{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3","program":"/home/aprokruov/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=769e8ddc3fd5e3d1","-C","extra-filename=-769e8ddc3fd5e3d1","--out-dir","/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps","-L","dependency=/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps","--extern","scopeguard=/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps/libscopeguard-8931c15b7c7def42.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/aprokruov/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/aprokruov/Projects/Rust/greenie/target/rls/debug/deps/liblock_api-769e8ddc3fd5e3d1.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[7467223425980433337,18438449482621443306]},"crate_root":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src","external_crates":[{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[15592741845567276740,3156031529314222720]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13374244477361630302,7769620793786617884]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3975653617116332831,3246029778383962529]}},{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[5628241028486987406,10006265356593446159]}}],"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":856}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"! This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"! implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"! generic with regards to different lock implementations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! Basic usage of this crate is very straightforward:","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"!    data protected by the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"! 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"! 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"!    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"!    See the [example](#example) below for details.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"! exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"! use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! // 1. Define our raw lock type","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"! pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // 2. Implement RawMutex for this type","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"! unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"!     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"!     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"!     type GuardMarker = GuardSend;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"!     fn lock(&self) {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"!         // suffices for the sake of this example.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"!         while !self.try_lock() {}","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!     fn try_lock(&self) -> bool {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"!         self.0.swap(true, Ordering::Acquire)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2098,"byte_end":2146,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"!     }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2147,"byte_end":2156,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2157,"byte_end":2160,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"!     fn unlock(&self) {","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2161,"byte_end":2187,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"!         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2188,"byte_end":2239,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"!     }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2240,"byte_end":2249,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2250,"byte_end":2255,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2256,"byte_end":2259,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2260,"byte_end":2344,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2345,"byte_end":2404,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"! pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2405,"byte_end":2482,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"! ```","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2483,"byte_end":2490,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2491,"byte_end":2494,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! # Extension traits","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2495,"byte_end":2517,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2518,"byte_end":2521,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2522,"byte_end":2601,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"! of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2602,"byte_end":2677,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! additional traits for it. Examples of extension features include:","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2678,"byte_end":2747,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2748,"byte_end":2751,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2752,"byte_end":2806,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"! - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2807,"byte_end":2862,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"! - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2863,"byte_end":2919,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"! - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2920,"byte_end":2969,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"! - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":2970,"byte_end":3018,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3019,"byte_end":3022,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3023,"byte_end":3102,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"! functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3103,"byte_end":3176,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! # Cargo features","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3181,"byte_end":3201,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! This crate supports two cargo features:","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3206,"byte_end":3249,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3250,"byte_end":3253,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3254,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"! - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3337,"byte_end":3412,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"!   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3413,"byte_end":3469,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3625,"byte_end":3698,"line_start":94,"line_end":94,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3726,"byte_end":3803,"line_start":97,"line_end":97,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4565,"byte_end":4598,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4599,"byte_end":4602,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4603,"byte_end":4678,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4679,"byte_end":4712,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4713,"byte_end":4716,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4717,"byte_end":4729,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4730,"byte_end":4733,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4734,"byte_end":4806,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4807,"byte_end":4881,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5210,"byte_end":5214,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4914,"byte_end":4954,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5151,"byte_end":5199,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5379,"byte_end":5390,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5227,"byte_end":5302,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5307,"byte_end":5369,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5484,"byte_end":5488,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5397,"byte_end":5476,"line_start":40,"line_end":40,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5562,"byte_end":5570,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5502,"byte_end":5554,"line_start":43,"line_end":43,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5623,"byte_end":5629,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5592,"byte_end":5615,"line_start":46,"line_end":46,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6021,"byte_end":6033,"line_start":56,"line_end":56,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5641,"byte_end":5705,"line_start":50,"line_end":50,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5706,"byte_end":5709,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5710,"byte_end":5790,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5791,"byte_end":5866,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5867,"byte_end":5941,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5942,"byte_end":6003,"line_start":55,"line_end":55,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6110,"byte_end":6121,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6050,"byte_end":6102,"line_start":57,"line_end":57,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6414,"byte_end":6418,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6135,"byte_end":6204,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6209,"byte_end":6212,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6217,"byte_end":6293,"line_start":62,"line_end":62,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6298,"byte_end":6374,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6379,"byte_end":6406,"line_start":64,"line_end":64,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6716,"byte_end":6729,"line_start":75,"line_end":75,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6486,"byte_end":6557,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6558,"byte_end":6561,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6562,"byte_end":6642,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6643,"byte_end":6698,"line_start":74,"line_end":74,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6798,"byte_end":6806,"line_start":77,"line_end":77,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6746,"byte_end":6788,"line_start":76,"line_end":76,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6866,"byte_end":6873,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6813,"byte_end":6856,"line_start":79,"line_end":79,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6949,"byte_end":6961,"line_start":83,"line_end":83,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6880,"byte_end":6941,"line_start":82,"line_end":82,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7077,"byte_end":7091,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7008,"byte_end":7069,"line_start":85,"line_end":85,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7645,"byte_end":7650,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7135,"byte_end":7201,"line_start":89,"line_end":89,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7202,"byte_end":7205,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7206,"byte_end":7285,"line_start":91,"line_end":91,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7286,"byte_end":7353,"line_start":92,"line_end":92,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7354,"byte_end":7433,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7434,"byte_end":7509,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7510,"byte_end":7589,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7590,"byte_end":7633,"line_start":96,"line_end":96,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8282,"byte_end":8285,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8160,"byte_end":8219,"line_start":116,"line_end":116,"column_start":5,"column_end":64}},{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8224,"byte_end":8256,"line_start":117,"line_end":117,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8261,"byte_end":8270,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8495,"byte_end":8505,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8414,"byte_end":8469,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8474,"byte_end":8483,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9388,"byte_end":9392,"line_start":155,"line_end":155,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8850,"byte_end":8926,"line_start":145,"line_end":145,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8931,"byte_end":8934,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8939,"byte_end":9017,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9022,"byte_end":9097,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9102,"byte_end":9178,"line_start":149,"line_end":149,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9183,"byte_end":9243,"line_start":150,"line_end":150,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9248,"byte_end":9251,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9256,"byte_end":9332,"line_start":152,"line_end":152,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9337,"byte_end":9362,"line_start":153,"line_end":153,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9367,"byte_end":9376,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9846,"byte_end":9854,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9544,"byte_end":9578,"line_start":161,"line_end":161,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9583,"byte_end":9586,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9591,"byte_end":9667,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9672,"byte_end":9748,"line_start":164,"line_end":164,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9753,"byte_end":9774,"line_start":165,"line_end":165,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9779,"byte_end":9782,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9787,"byte_end":9820,"line_start":167,"line_end":167,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9825,"byte_end":9834,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10327,"byte_end":10334,"line_start":183,"line_end":183,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10080,"byte_end":10135,"line_start":178,"line_end":178,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10140,"byte_end":10143,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10148,"byte_end":10223,"line_start":180,"line_end":180,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10228,"byte_end":10301,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10306,"byte_end":10315,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10918,"byte_end":10930,"line_start":199,"line_end":199,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10410,"byte_end":10441,"line_start":187,"line_end":187,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10446,"byte_end":10449,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10454,"byte_end":10528,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10533,"byte_end":10603,"line_start":190,"line_end":190,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10608,"byte_end":10629,"line_start":191,"line_end":191,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10634,"byte_end":10637,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10642,"byte_end":10654,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10659,"byte_end":10662,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10667,"byte_end":10741,"line_start":195,"line_end":195,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10746,"byte_end":10815,"line_start":196,"line_end":196,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10820,"byte_end":10885,"line_start":197,"line_end":197,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10890,"byte_end":10899,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11367,"byte_end":11370,"line_start":213,"line_end":213,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10978,"byte_end":11022,"line_start":203,"line_end":203,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11027,"byte_end":11030,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11035,"byte_end":11110,"line_start":205,"line_end":205,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11115,"byte_end":11176,"line_start":206,"line_end":206,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11181,"byte_end":11184,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11189,"byte_end":11201,"line_start":208,"line_end":208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11206,"byte_end":11209,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11214,"byte_end":11281,"line_start":210,"line_end":210,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11286,"byte_end":11334,"line_start":211,"line_end":211,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11339,"byte_end":11348,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12001,"byte_end":12018,"line_start":231,"line_end":231,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11464,"byte_end":11524,"line_start":219,"line_end":219,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11529,"byte_end":11532,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11537,"byte_end":11611,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11616,"byte_end":11686,"line_start":222,"line_end":222,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11691,"byte_end":11712,"line_start":223,"line_end":223,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11717,"byte_end":11720,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11725,"byte_end":11737,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11742,"byte_end":11745,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11750,"byte_end":11824,"line_start":227,"line_end":227,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11829,"byte_end":11898,"line_start":228,"line_end":228,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11903,"byte_end":11968,"line_start":229,"line_end":229,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11973,"byte_end":11982,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12418,"byte_end":12430,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12121,"byte_end":12182,"line_start":237,"line_end":237,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12187,"byte_end":12190,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12195,"byte_end":12265,"line_start":239,"line_end":239,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12270,"byte_end":12345,"line_start":240,"line_end":240,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12350,"byte_end":12392,"line_start":241,"line_end":241,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12397,"byte_end":12406,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12986,"byte_end":13000,"line_start":258,"line_end":258,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12689,"byte_end":12750,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12755,"byte_end":12758,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12763,"byte_end":12833,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12838,"byte_end":12913,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12918,"byte_end":12960,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12965,"byte_end":12974,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15208,"byte_end":15218,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":14868,"byte_end":14948,"line_start":331,"line_end":331,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":14949,"byte_end":15009,"line_start":332,"line_end":332,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15010,"byte_end":15013,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15014,"byte_end":15092,"line_start":334,"line_end":334,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15093,"byte_end":15136,"line_start":335,"line_end":335,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15137,"byte_end":15196,"line_start":336,"line_end":336,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15569,"byte_end":15574,"line_start":346,"line_end":346,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15502,"byte_end":15557,"line_start":345,"line_end":345,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16039,"byte_end":16042,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15633,"byte_end":15703,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15708,"byte_end":15711,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15716,"byte_end":15773,"line_start":352,"line_end":352,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15778,"byte_end":15810,"line_start":353,"line_end":353,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15815,"byte_end":15818,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15823,"byte_end":15874,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15879,"byte_end":15955,"line_start":356,"line_end":356,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15960,"byte_end":16013,"line_start":357,"line_end":357,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16018,"byte_end":16027,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16877,"byte_end":16884,"line_start":383,"line_end":383,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16386,"byte_end":16454,"line_start":373,"line_end":373,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16459,"byte_end":16537,"line_start":374,"line_end":374,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16542,"byte_end":16545,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16550,"byte_end":16607,"line_start":376,"line_end":376,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16612,"byte_end":16644,"line_start":377,"line_end":377,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16649,"byte_end":16652,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16657,"byte_end":16708,"line_start":379,"line_end":379,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16713,"byte_end":16793,"line_start":380,"line_end":380,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16798,"byte_end":16851,"line_start":381,"line_end":381,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16856,"byte_end":16865,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17565,"byte_end":17573,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17339,"byte_end":17403,"line_start":400,"line_end":400,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17408,"byte_end":17411,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17416,"byte_end":17484,"line_start":402,"line_end":402,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17489,"byte_end":17539,"line_start":403,"line_end":403,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17544,"byte_end":17553,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18589,"byte_end":18600,"line_start":429,"line_end":429,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17808,"byte_end":17859,"line_start":416,"line_end":416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17864,"byte_end":17867,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17872,"byte_end":17946,"line_start":418,"line_end":418,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17951,"byte_end":18023,"line_start":419,"line_end":419,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18028,"byte_end":18102,"line_start":420,"line_end":420,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18107,"byte_end":18182,"line_start":421,"line_end":421,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18187,"byte_end":18258,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18263,"byte_end":18320,"line_start":423,"line_end":423,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18325,"byte_end":18328,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18333,"byte_end":18409,"line_start":425,"line_end":425,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18414,"byte_end":18490,"line_start":426,"line_end":426,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18495,"byte_end":18563,"line_start":427,"line_end":427,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18568,"byte_end":18577,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18976,"byte_end":18989,"line_start":441,"line_end":441,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18682,"byte_end":18746,"line_start":434,"line_end":434,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18751,"byte_end":18754,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18759,"byte_end":18814,"line_start":436,"line_end":436,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18819,"byte_end":18822,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18827,"byte_end":18895,"line_start":438,"line_end":438,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18900,"byte_end":18950,"line_start":439,"line_end":439,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18955,"byte_end":18964,"line_start":440,"line_end":440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19454,"byte_end":19458,"line_start":456,"line_end":456,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19157,"byte_end":19226,"line_start":450,"line_end":450,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19231,"byte_end":19234,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19239,"byte_end":19315,"line_start":452,"line_end":452,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19320,"byte_end":19396,"line_start":453,"line_end":453,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19401,"byte_end":19428,"line_start":454,"line_end":454,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19433,"byte_end":19442,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21004,"byte_end":21020,"line_start":506,"line_end":506,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20568,"byte_end":20643,"line_start":498,"line_end":498,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20644,"byte_end":20679,"line_start":499,"line_end":499,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20680,"byte_end":20683,"line_start":500,"line_end":500,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20684,"byte_end":20763,"line_start":501,"line_end":501,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20764,"byte_end":20839,"line_start":502,"line_end":502,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20840,"byte_end":20920,"line_start":503,"line_end":503,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20921,"byte_end":20932,"line_start":504,"line_end":504,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20933,"byte_end":20992,"line_start":505,"line_end":505,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21848,"byte_end":21851,"line_start":531,"line_end":531,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21430,"byte_end":21500,"line_start":522,"line_end":522,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21505,"byte_end":21508,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21513,"byte_end":21576,"line_start":524,"line_end":524,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21581,"byte_end":21613,"line_start":525,"line_end":525,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21618,"byte_end":21621,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21626,"byte_end":21677,"line_start":527,"line_end":527,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21682,"byte_end":21764,"line_start":528,"line_end":528,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21769,"byte_end":21822,"line_start":529,"line_end":529,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21827,"byte_end":21836,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22679,"byte_end":22686,"line_start":555,"line_end":555,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22176,"byte_end":22244,"line_start":545,"line_end":545,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22249,"byte_end":22327,"line_start":546,"line_end":546,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22332,"byte_end":22335,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22340,"byte_end":22403,"line_start":548,"line_end":548,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22408,"byte_end":22440,"line_start":549,"line_end":549,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22445,"byte_end":22448,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22453,"byte_end":22504,"line_start":551,"line_end":551,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22509,"byte_end":22595,"line_start":552,"line_end":552,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22600,"byte_end":22653,"line_start":553,"line_end":553,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22658,"byte_end":22667,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23981,"byte_end":23992,"line_start":587,"line_end":587,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23200,"byte_end":23251,"line_start":574,"line_end":574,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23256,"byte_end":23259,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23264,"byte_end":23338,"line_start":576,"line_end":576,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23343,"byte_end":23415,"line_start":577,"line_end":577,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23420,"byte_end":23494,"line_start":578,"line_end":578,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23499,"byte_end":23574,"line_start":579,"line_end":579,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23579,"byte_end":23650,"line_start":580,"line_end":580,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23655,"byte_end":23712,"line_start":581,"line_end":581,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23717,"byte_end":23720,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23725,"byte_end":23801,"line_start":583,"line_end":583,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23806,"byte_end":23882,"line_start":584,"line_end":584,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23887,"byte_end":23955,"line_start":585,"line_end":585,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23960,"byte_end":23969,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26275,"byte_end":26286,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":25874,"byte_end":25926,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":25927,"byte_end":25930,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":25931,"byte_end":26005,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26006,"byte_end":26032,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26033,"byte_end":26036,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26037,"byte_end":26049,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26050,"byte_end":26053,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26054,"byte_end":26132,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26133,"byte_end":26206,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26207,"byte_end":26257,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26567,"byte_end":26571,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26293,"byte_end":26311,"line_start":39,"line_end":39,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26508,"byte_end":26556,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26682,"byte_end":26699,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> NonZeroUsize","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26584,"byte_end":26655,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26660,"byte_end":26674,"line_start":46,"line_end":46,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29572,"byte_end":29586,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29097,"byte_end":29160,"line_start":137,"line_end":137,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29161,"byte_end":29164,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29165,"byte_end":29235,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29236,"byte_end":29239,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29240,"byte_end":29320,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29321,"byte_end":29339,"line_start":142,"line_end":142,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29340,"byte_end":29420,"line_start":143,"line_end":143,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29421,"byte_end":29460,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29461,"byte_end":29464,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29465,"byte_end":29545,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29546,"byte_end":29560,"line_start":147,"line_end":147,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30589,"byte_end":30592,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30457,"byte_end":30526,"line_start":178,"line_end":178,"column_start":5,"column_end":74}},{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30531,"byte_end":30563,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30568,"byte_end":30577,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31007,"byte_end":31017,"line_start":195,"line_end":195,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30926,"byte_end":30981,"line_start":193,"line_end":193,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30986,"byte_end":30995,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32053,"byte_end":32057,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31414,"byte_end":31490,"line_start":212,"line_end":212,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31495,"byte_end":31508,"line_start":213,"line_end":213,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31513,"byte_end":31516,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31521,"byte_end":31597,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31602,"byte_end":31678,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31683,"byte_end":31759,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31764,"byte_end":31828,"line_start":218,"line_end":218,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31833,"byte_end":31904,"line_start":219,"line_end":219,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31909,"byte_end":31984,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31989,"byte_end":32027,"line_start":221,"line_end":221,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32032,"byte_end":32041,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32523,"byte_end":32531,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32221,"byte_end":32255,"line_start":229,"line_end":229,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32260,"byte_end":32263,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32268,"byte_end":32344,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32349,"byte_end":32425,"line_start":232,"line_end":232,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32430,"byte_end":32451,"line_start":233,"line_end":233,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32456,"byte_end":32459,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32464,"byte_end":32497,"line_start":235,"line_end":235,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32502,"byte_end":32511,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33025,"byte_end":33032,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32769,"byte_end":32824,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32829,"byte_end":32832,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32837,"byte_end":32921,"line_start":248,"line_end":248,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32926,"byte_end":32999,"line_start":249,"line_end":249,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33004,"byte_end":33013,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33634,"byte_end":33646,"line_start":267,"line_end":267,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33108,"byte_end":33139,"line_start":255,"line_end":255,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33144,"byte_end":33147,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33152,"byte_end":33226,"line_start":257,"line_end":257,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33231,"byte_end":33310,"line_start":258,"line_end":258,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33315,"byte_end":33336,"line_start":259,"line_end":259,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33341,"byte_end":33344,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33349,"byte_end":33361,"line_start":261,"line_end":261,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33366,"byte_end":33369,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33374,"byte_end":33448,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33453,"byte_end":33531,"line_start":264,"line_end":264,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33536,"byte_end":33601,"line_start":265,"line_end":265,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33606,"byte_end":33615,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34092,"byte_end":34095,"line_start":281,"line_end":281,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33694,"byte_end":33738,"line_start":271,"line_end":271,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33743,"byte_end":33746,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33751,"byte_end":33826,"line_start":273,"line_end":273,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33831,"byte_end":33892,"line_start":274,"line_end":274,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33897,"byte_end":33900,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33905,"byte_end":33917,"line_start":276,"line_end":276,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33922,"byte_end":33925,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33930,"byte_end":33997,"line_start":278,"line_end":278,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34002,"byte_end":34059,"line_start":279,"line_end":279,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34064,"byte_end":34073,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34778,"byte_end":34795,"line_start":299,"line_end":299,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34223,"byte_end":34283,"line_start":287,"line_end":287,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34288,"byte_end":34291,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34296,"byte_end":34370,"line_start":289,"line_end":289,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34375,"byte_end":34454,"line_start":290,"line_end":290,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34459,"byte_end":34480,"line_start":291,"line_end":291,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34485,"byte_end":34488,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34493,"byte_end":34505,"line_start":293,"line_end":293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34510,"byte_end":34513,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34518,"byte_end":34592,"line_start":295,"line_end":295,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34597,"byte_end":34675,"line_start":296,"line_end":296,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34680,"byte_end":34745,"line_start":297,"line_end":297,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34750,"byte_end":34759,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35223,"byte_end":35235,"line_start":311,"line_end":311,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34926,"byte_end":34987,"line_start":305,"line_end":305,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34992,"byte_end":34995,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35000,"byte_end":35070,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35075,"byte_end":35150,"line_start":308,"line_end":308,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35155,"byte_end":35197,"line_start":309,"line_end":309,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35202,"byte_end":35211,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35803,"byte_end":35817,"line_start":326,"line_end":326,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35506,"byte_end":35567,"line_start":320,"line_end":320,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35572,"byte_end":35575,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35580,"byte_end":35650,"line_start":322,"line_end":322,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35655,"byte_end":35730,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35735,"byte_end":35777,"line_start":324,"line_end":324,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35782,"byte_end":35791,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38314,"byte_end":38333,"line_start":410,"line_end":410,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":37971,"byte_end":38058,"line_start":404,"line_end":404,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38059,"byte_end":38122,"line_start":405,"line_end":405,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38123,"byte_end":38126,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38127,"byte_end":38205,"line_start":407,"line_end":407,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38206,"byte_end":38233,"line_start":408,"line_end":408,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38234,"byte_end":38302,"line_start":409,"line_end":409,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38794,"byte_end":38801,"line_start":422,"line_end":422,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38718,"byte_end":38782,"line_start":421,"line_end":421,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39307,"byte_end":39310,"line_start":435,"line_end":435,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38874,"byte_end":38953,"line_start":426,"line_end":426,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38958,"byte_end":38961,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38966,"byte_end":39032,"line_start":428,"line_end":428,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39037,"byte_end":39069,"line_start":429,"line_end":429,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39074,"byte_end":39077,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39082,"byte_end":39133,"line_start":431,"line_end":431,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39138,"byte_end":39223,"line_start":432,"line_end":432,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39228,"byte_end":39281,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39286,"byte_end":39295,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40180,"byte_end":40187,"line_start":459,"line_end":459,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39667,"byte_end":39745,"line_start":449,"line_end":449,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39750,"byte_end":39826,"line_start":450,"line_end":450,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39831,"byte_end":39834,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39839,"byte_end":39905,"line_start":452,"line_end":452,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39910,"byte_end":39942,"line_start":453,"line_end":453,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39947,"byte_end":39950,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39955,"byte_end":40006,"line_start":455,"line_end":455,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40011,"byte_end":40096,"line_start":456,"line_end":456,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40101,"byte_end":40154,"line_start":457,"line_end":457,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40159,"byte_end":40168,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40916,"byte_end":40924,"line_start":484,"line_end":484,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40690,"byte_end":40754,"line_start":479,"line_end":479,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40759,"byte_end":40762,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40767,"byte_end":40835,"line_start":481,"line_end":481,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40840,"byte_end":40890,"line_start":482,"line_end":482,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40895,"byte_end":40904,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41990,"byte_end":42001,"line_start":510,"line_end":510,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41200,"byte_end":41251,"line_start":497,"line_end":497,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41256,"byte_end":41259,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41264,"byte_end":41338,"line_start":499,"line_end":499,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41343,"byte_end":41415,"line_start":500,"line_end":500,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41420,"byte_end":41494,"line_start":501,"line_end":501,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41499,"byte_end":41574,"line_start":502,"line_end":502,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41579,"byte_end":41650,"line_start":503,"line_end":503,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41655,"byte_end":41712,"line_start":504,"line_end":504,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41717,"byte_end":41720,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41725,"byte_end":41801,"line_start":506,"line_end":506,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41806,"byte_end":41882,"line_start":507,"line_end":507,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41887,"byte_end":41964,"line_start":508,"line_end":508,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41969,"byte_end":41978,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42373,"byte_end":42386,"line_start":522,"line_end":522,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42085,"byte_end":42149,"line_start":515,"line_end":515,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42154,"byte_end":42157,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42162,"byte_end":42211,"line_start":517,"line_end":517,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42216,"byte_end":42219,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42224,"byte_end":42292,"line_start":519,"line_end":519,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42297,"byte_end":42347,"line_start":520,"line_end":520,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42352,"byte_end":42361,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42855,"byte_end":42859,"line_start":537,"line_end":537,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42558,"byte_end":42627,"line_start":531,"line_end":531,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42632,"byte_end":42635,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42640,"byte_end":42716,"line_start":533,"line_end":533,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42721,"byte_end":42797,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42802,"byte_end":42829,"line_start":535,"line_end":535,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42834,"byte_end":42843,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44444,"byte_end":44469,"line_start":591,"line_end":591,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43972,"byte_end":44056,"line_start":583,"line_end":583,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44057,"byte_end":44092,"line_start":584,"line_end":584,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44093,"byte_end":44096,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44097,"byte_end":44194,"line_start":586,"line_end":586,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44195,"byte_end":44270,"line_start":587,"line_end":587,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44271,"byte_end":44351,"line_start":588,"line_end":588,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44352,"byte_end":44363,"line_start":589,"line_end":589,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44364,"byte_end":44432,"line_start":590,"line_end":590,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45316,"byte_end":45319,"line_start":614,"line_end":614,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44871,"byte_end":44950,"line_start":605,"line_end":605,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44955,"byte_end":44958,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44963,"byte_end":45035,"line_start":607,"line_end":607,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45040,"byte_end":45072,"line_start":608,"line_end":608,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45077,"byte_end":45080,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45085,"byte_end":45136,"line_start":610,"line_end":610,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45141,"byte_end":45232,"line_start":611,"line_end":611,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45237,"byte_end":45290,"line_start":612,"line_end":612,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45295,"byte_end":45304,"line_start":613,"line_end":613,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46178,"byte_end":46185,"line_start":638,"line_end":638,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45653,"byte_end":45731,"line_start":628,"line_end":628,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45736,"byte_end":45812,"line_start":629,"line_end":629,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45817,"byte_end":45820,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45825,"byte_end":45897,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45902,"byte_end":45934,"line_start":632,"line_end":632,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45939,"byte_end":45942,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45947,"byte_end":45998,"line_start":634,"line_end":634,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46003,"byte_end":46094,"line_start":635,"line_end":635,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46099,"byte_end":46152,"line_start":636,"line_end":636,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46157,"byte_end":46166,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47558,"byte_end":47569,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46768,"byte_end":46819,"line_start":662,"line_end":662,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46824,"byte_end":46827,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46832,"byte_end":46906,"line_start":664,"line_end":664,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46911,"byte_end":46983,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46988,"byte_end":47062,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47067,"byte_end":47142,"line_start":667,"line_end":667,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47147,"byte_end":47218,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47223,"byte_end":47280,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47285,"byte_end":47288,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47293,"byte_end":47369,"line_start":671,"line_end":671,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47374,"byte_end":47450,"line_start":672,"line_end":672,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47455,"byte_end":47532,"line_start":673,"line_end":673,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47537,"byte_end":47546,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49765,"byte_end":49774,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49318,"byte_end":49364,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49365,"byte_end":49368,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49369,"byte_end":49445,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49446,"byte_end":49482,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49483,"byte_end":49486,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49487,"byte_end":49499,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49500,"byte_end":49503,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49504,"byte_end":49579,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49580,"byte_end":49659,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49660,"byte_end":49735,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49736,"byte_end":49747,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50080,"byte_end":50084,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49781,"byte_end":49824,"line_start":32,"line_end":32,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50021,"byte_end":50069,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50249,"byte_end":50260,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50097,"byte_end":50172,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50177,"byte_end":50239,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50357,"byte_end":50368,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50267,"byte_end":50349,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50445,"byte_end":50460,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50382,"byte_end":50437,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50517,"byte_end":50530,"line_start":49,"line_end":49,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50482,"byte_end":50509,"line_start":48,"line_end":48,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50638,"byte_end":50652,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50544,"byte_end":50630,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50733,"byte_end":50751,"line_start":55,"line_end":55,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50666,"byte_end":50725,"line_start":54,"line_end":54,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50812,"byte_end":50828,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50773,"byte_end":50804,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51220,"byte_end":51233,"line_start":67,"line_end":67,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50840,"byte_end":50904,"line_start":61,"line_end":61,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50905,"byte_end":50908,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50909,"byte_end":50989,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50990,"byte_end":51065,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51066,"byte_end":51140,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51141,"byte_end":51202,"line_start":66,"line_end":66,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51315,"byte_end":51333,"line_start":69,"line_end":69,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51251,"byte_end":51307,"line_start":68,"line_end":68,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51415,"byte_end":51436,"line_start":72,"line_end":72,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51347,"byte_end":51407,"line_start":71,"line_end":71,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51747,"byte_end":51758,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51450,"byte_end":51523,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51528,"byte_end":51531,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51536,"byte_end":51619,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51624,"byte_end":51707,"line_start":77,"line_end":77,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51712,"byte_end":51739,"line_start":78,"line_end":78,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52149,"byte_end":52163,"line_start":89,"line_end":89,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51842,"byte_end":51919,"line_start":84,"line_end":84,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51924,"byte_end":51927,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51932,"byte_end":52018,"line_start":86,"line_end":86,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52023,"byte_end":52109,"line_start":87,"line_end":87,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52114,"byte_end":52141,"line_start":88,"line_end":88,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":450},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52380,"byte_end":52398,"line_start":97,"line_end":97,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":451}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52251,"byte_end":52325,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52326,"byte_end":52362,"line_start":96,"line_end":96,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52565,"byte_end":52574,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52416,"byte_end":52486,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52491,"byte_end":52557,"line_start":99,"line_end":99,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":452},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52816,"byte_end":52830,"line_start":107,"line_end":107,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52586,"byte_end":52657,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52658,"byte_end":52661,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52662,"byte_end":52742,"line_start":105,"line_end":105,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52743,"byte_end":52798,"line_start":106,"line_end":106,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52900,"byte_end":52908,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52848,"byte_end":52890,"line_start":108,"line_end":108,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52968,"byte_end":52975,"line_start":112,"line_end":112,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52915,"byte_end":52958,"line_start":111,"line_end":111,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53055,"byte_end":53074,"line_start":115,"line_end":115,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52982,"byte_end":53047,"line_start":114,"line_end":114,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53194,"byte_end":53215,"line_start":118,"line_end":118,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53121,"byte_end":53186,"line_start":117,"line_end":117,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53338,"byte_end":53360,"line_start":121,"line_end":121,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53261,"byte_end":53330,"line_start":120,"line_end":120,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53484,"byte_end":53508,"line_start":124,"line_end":124,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53407,"byte_end":53476,"line_start":123,"line_end":123,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":459},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53941,"byte_end":53959,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53552,"byte_end":53622,"line_start":127,"line_end":127,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53623,"byte_end":53626,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53627,"byte_end":53682,"line_start":129,"line_end":129,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53683,"byte_end":53758,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53759,"byte_end":53830,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53831,"byte_end":53905,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53906,"byte_end":53923,"line_start":133,"line_end":133,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54060,"byte_end":54081,"line_start":136,"line_end":136,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53977,"byte_end":54052,"line_start":135,"line_end":135,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54189,"byte_end":54214,"line_start":139,"line_end":139,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54095,"byte_end":54181,"line_start":138,"line_end":138,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54335,"byte_end":54358,"line_start":143,"line_end":143,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54234,"byte_end":54317,"line_start":142,"line_end":142,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54532,"byte_end":54561,"line_start":146,"line_end":146,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54402,"byte_end":54475,"line_start":144,"line_end":144,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54480,"byte_end":54524,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54738,"byte_end":54769,"line_start":150,"line_end":150,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54608,"byte_end":54681,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54686,"byte_end":54730,"line_start":149,"line_end":149,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55145,"byte_end":55161,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54813,"byte_end":54891,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54892,"byte_end":54922,"line_start":154,"line_end":154,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54923,"byte_end":54926,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54927,"byte_end":55000,"line_start":156,"line_end":156,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55001,"byte_end":55075,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55076,"byte_end":55127,"line_start":158,"line_end":158,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55274,"byte_end":55289,"line_start":161,"line_end":161,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55179,"byte_end":55266,"line_start":160,"line_end":160,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55371,"byte_end":55390,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55303,"byte_end":55363,"line_start":163,"line_end":163,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55452,"byte_end":55469,"line_start":167,"line_end":167,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55412,"byte_end":55444,"line_start":166,"line_end":166,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55544,"byte_end":55551,"line_start":170,"line_end":170,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55483,"byte_end":55536,"line_start":169,"line_end":169,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55662,"byte_end":55673,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55565,"byte_end":55636,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55641,"byte_end":55654,"line_start":173,"line_end":173,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55800,"byte_end":55820,"line_start":179,"line_end":179,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55693,"byte_end":55767,"line_start":177,"line_end":177,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55768,"byte_end":55782,"line_start":178,"line_end":178,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55930,"byte_end":55952,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55861,"byte_end":55922,"line_start":180,"line_end":180,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56276,"byte_end":56291,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55966,"byte_end":56044,"line_start":183,"line_end":183,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56049,"byte_end":56052,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56057,"byte_end":56144,"line_start":185,"line_end":185,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56149,"byte_end":56236,"line_start":186,"line_end":186,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56241,"byte_end":56268,"line_start":187,"line_end":187,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56490,"byte_end":56515,"line_start":196,"line_end":196,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56381,"byte_end":56455,"line_start":194,"line_end":194,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56456,"byte_end":56472,"line_start":195,"line_end":195,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56620,"byte_end":56640,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56561,"byte_end":56612,"line_start":197,"line_end":197,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56717,"byte_end":56740,"line_start":201,"line_end":201,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56654,"byte_end":56709,"line_start":200,"line_end":200,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56866,"byte_end":56887,"line_start":206,"line_end":206,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56752,"byte_end":56829,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56830,"byte_end":56848,"line_start":205,"line_end":205,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57007,"byte_end":57030,"line_start":208,"line_end":208,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56929,"byte_end":56999,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57155,"byte_end":57180,"line_start":211,"line_end":211,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57077,"byte_end":57147,"line_start":210,"line_end":210,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57333,"byte_end":57348,"line_start":215,"line_end":215,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57226,"byte_end":57297,"line_start":213,"line_end":213,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57302,"byte_end":57325,"line_start":214,"line_end":214,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57502,"byte_end":57519,"line_start":219,"line_end":219,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57395,"byte_end":57466,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57471,"byte_end":57494,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":58271,"byte_end":58277,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57563,"byte_end":57587,"line_start":222,"line_end":222,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57588,"byte_end":57591,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57592,"byte_end":57669,"line_start":224,"line_end":224,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57670,"byte_end":57749,"line_start":225,"line_end":225,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57750,"byte_end":57829,"line_start":226,"line_end":226,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57830,"byte_end":57888,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57889,"byte_end":57892,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57893,"byte_end":57970,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57971,"byte_end":58051,"line_start":230,"line_end":230,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":58052,"byte_end":58130,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":58131,"byte_end":58209,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":58210,"byte_end":58259,"line_start":233,"line_end":233,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59563,"byte_end":59566,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59437,"byte_end":59500,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59505,"byte_end":59537,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59542,"byte_end":59551,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59809,"byte_end":59819,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59697,"byte_end":59755,"line_start":292,"line_end":292,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59760,"byte_end":59769,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59774,"byte_end":59797,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61064,"byte_end":61068,"line_start":336,"line_end":336,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60456,"byte_end":60532,"line_start":323,"line_end":323,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60537,"byte_end":60566,"line_start":324,"line_end":324,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60571,"byte_end":60574,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60579,"byte_end":60655,"line_start":326,"line_end":326,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60660,"byte_end":60736,"line_start":327,"line_end":327,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60741,"byte_end":60765,"line_start":328,"line_end":328,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60770,"byte_end":60773,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60778,"byte_end":60854,"line_start":330,"line_end":330,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60859,"byte_end":60925,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60930,"byte_end":60933,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":60938,"byte_end":61010,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61015,"byte_end":61038,"line_start":334,"line_end":334,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61043,"byte_end":61052,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61571,"byte_end":61579,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61237,"byte_end":61299,"line_start":342,"line_end":342,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61304,"byte_end":61307,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61312,"byte_end":61389,"line_start":344,"line_end":344,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61394,"byte_end":61471,"line_start":345,"line_end":345,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61476,"byte_end":61499,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61504,"byte_end":61507,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61512,"byte_end":61545,"line_start":348,"line_end":348,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61550,"byte_end":61559,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62198,"byte_end":62203,"line_start":368,"line_end":368,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61822,"byte_end":61895,"line_start":359,"line_end":359,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61900,"byte_end":61936,"line_start":360,"line_end":360,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61941,"byte_end":61944,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61949,"byte_end":62019,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62024,"byte_end":62062,"line_start":363,"line_end":363,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62067,"byte_end":62070,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62075,"byte_end":62150,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62155,"byte_end":62172,"line_start":366,"line_end":366,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62177,"byte_end":62186,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62702,"byte_end":62711,"line_start":382,"line_end":382,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62377,"byte_end":62440,"line_start":374,"line_end":374,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62445,"byte_end":62448,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62453,"byte_end":62529,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62534,"byte_end":62607,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62612,"byte_end":62630,"line_start":378,"line_end":378,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62635,"byte_end":62638,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62643,"byte_end":62676,"line_start":380,"line_end":380,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62681,"byte_end":62690,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63207,"byte_end":63214,"line_start":396,"line_end":396,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62959,"byte_end":63014,"line_start":391,"line_end":391,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63019,"byte_end":63022,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63027,"byte_end":63103,"line_start":393,"line_end":393,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63108,"byte_end":63181,"line_start":394,"line_end":394,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63186,"byte_end":63195,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63821,"byte_end":63838,"line_start":412,"line_end":412,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63290,"byte_end":63323,"line_start":400,"line_end":400,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63328,"byte_end":63331,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63336,"byte_end":63410,"line_start":402,"line_end":402,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63415,"byte_end":63490,"line_start":403,"line_end":403,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63495,"byte_end":63516,"line_start":404,"line_end":404,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63521,"byte_end":63524,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63529,"byte_end":63541,"line_start":406,"line_end":406,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63546,"byte_end":63549,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63554,"byte_end":63628,"line_start":408,"line_end":408,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63633,"byte_end":63707,"line_start":409,"line_end":409,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63712,"byte_end":63788,"line_start":410,"line_end":410,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63793,"byte_end":63802,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64429,"byte_end":64447,"line_start":428,"line_end":428,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63893,"byte_end":63927,"line_start":416,"line_end":416,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63932,"byte_end":63935,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63940,"byte_end":64014,"line_start":418,"line_end":418,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64019,"byte_end":64095,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64100,"byte_end":64121,"line_start":420,"line_end":420,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64126,"byte_end":64129,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64134,"byte_end":64146,"line_start":422,"line_end":422,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64151,"byte_end":64154,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64159,"byte_end":64233,"line_start":424,"line_end":424,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64238,"byte_end":64313,"line_start":425,"line_end":425,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64318,"byte_end":64396,"line_start":426,"line_end":426,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64401,"byte_end":64410,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64913,"byte_end":64916,"line_start":442,"line_end":442,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64505,"byte_end":64562,"line_start":432,"line_end":432,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64567,"byte_end":64570,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64575,"byte_end":64651,"line_start":434,"line_end":434,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64656,"byte_end":64710,"line_start":435,"line_end":435,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64715,"byte_end":64738,"line_start":436,"line_end":436,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64743,"byte_end":64746,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64751,"byte_end":64763,"line_start":438,"line_end":438,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64768,"byte_end":64771,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64776,"byte_end":64843,"line_start":440,"line_end":440,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64848,"byte_end":64894,"line_start":441,"line_end":441,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65572,"byte_end":65594,"line_start":460,"line_end":460,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65012,"byte_end":65074,"line_start":448,"line_end":448,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65079,"byte_end":65082,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65087,"byte_end":65161,"line_start":450,"line_end":450,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65166,"byte_end":65241,"line_start":451,"line_end":451,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65246,"byte_end":65267,"line_start":452,"line_end":452,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65272,"byte_end":65275,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65280,"byte_end":65292,"line_start":454,"line_end":454,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65297,"byte_end":65300,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65305,"byte_end":65379,"line_start":456,"line_end":456,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65384,"byte_end":65458,"line_start":457,"line_end":457,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65463,"byte_end":65539,"line_start":458,"line_end":458,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65544,"byte_end":65553,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66219,"byte_end":66242,"line_start":476,"line_end":476,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65654,"byte_end":65717,"line_start":464,"line_end":464,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65722,"byte_end":65725,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65730,"byte_end":65804,"line_start":466,"line_end":466,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65809,"byte_end":65885,"line_start":467,"line_end":467,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65890,"byte_end":65911,"line_start":468,"line_end":468,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65916,"byte_end":65919,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65924,"byte_end":65936,"line_start":470,"line_end":470,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65941,"byte_end":65944,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65949,"byte_end":66023,"line_start":472,"line_end":472,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66028,"byte_end":66103,"line_start":473,"line_end":473,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66108,"byte_end":66186,"line_start":474,"line_end":474,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66191,"byte_end":66200,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66694,"byte_end":66706,"line_start":489,"line_end":489,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66357,"byte_end":66434,"line_start":482,"line_end":482,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66439,"byte_end":66454,"line_start":483,"line_end":483,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66459,"byte_end":66462,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66467,"byte_end":66538,"line_start":485,"line_end":485,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66543,"byte_end":66614,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66619,"byte_end":66668,"line_start":487,"line_end":487,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66673,"byte_end":66682,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67319,"byte_end":67333,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66982,"byte_end":67059,"line_start":498,"line_end":498,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67064,"byte_end":67079,"line_start":499,"line_end":499,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67084,"byte_end":67087,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67092,"byte_end":67163,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67168,"byte_end":67239,"line_start":502,"line_end":502,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67244,"byte_end":67293,"line_start":503,"line_end":503,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67298,"byte_end":67307,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67954,"byte_end":67967,"line_start":521,"line_end":521,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67610,"byte_end":67683,"line_start":514,"line_end":514,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67688,"byte_end":67711,"line_start":515,"line_end":515,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67716,"byte_end":67719,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67724,"byte_end":67795,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67800,"byte_end":67871,"line_start":518,"line_end":518,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67876,"byte_end":67928,"line_start":519,"line_end":519,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67933,"byte_end":67942,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68592,"byte_end":68607,"line_start":537,"line_end":537,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68248,"byte_end":68321,"line_start":530,"line_end":530,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68326,"byte_end":68349,"line_start":531,"line_end":531,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68354,"byte_end":68357,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68362,"byte_end":68433,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68438,"byte_end":68509,"line_start":534,"line_end":534,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68514,"byte_end":68566,"line_start":535,"line_end":535,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68571,"byte_end":68580,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69738,"byte_end":69752,"line_start":564,"line_end":564,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68945,"byte_end":69021,"line_start":548,"line_end":548,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69026,"byte_end":69055,"line_start":549,"line_end":549,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69060,"byte_end":69063,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69068,"byte_end":69144,"line_start":551,"line_end":551,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69149,"byte_end":69225,"line_start":552,"line_end":552,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69230,"byte_end":69254,"line_start":553,"line_end":553,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69259,"byte_end":69262,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69267,"byte_end":69342,"line_start":555,"line_end":555,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69347,"byte_end":69422,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69427,"byte_end":69498,"line_start":557,"line_end":557,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69503,"byte_end":69577,"line_start":558,"line_end":558,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69582,"byte_end":69599,"line_start":559,"line_end":559,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69604,"byte_end":69607,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69612,"byte_end":69684,"line_start":561,"line_end":561,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69689,"byte_end":69712,"line_start":562,"line_end":562,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69717,"byte_end":69726,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70436,"byte_end":70454,"line_start":581,"line_end":581,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69931,"byte_end":69993,"line_start":570,"line_end":570,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69998,"byte_end":70001,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70006,"byte_end":70083,"line_start":572,"line_end":572,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70088,"byte_end":70165,"line_start":573,"line_end":573,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70170,"byte_end":70193,"line_start":574,"line_end":574,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70198,"byte_end":70201,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70206,"byte_end":70282,"line_start":576,"line_end":576,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70287,"byte_end":70364,"line_start":577,"line_end":577,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70369,"byte_end":70372,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70377,"byte_end":70410,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70415,"byte_end":70424,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71301,"byte_end":71323,"line_start":603,"line_end":603,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70768,"byte_end":70845,"line_start":592,"line_end":592,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70850,"byte_end":70865,"line_start":593,"line_end":593,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70870,"byte_end":70873,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70878,"byte_end":70949,"line_start":595,"line_end":595,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70954,"byte_end":71025,"line_start":596,"line_end":596,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71030,"byte_end":71079,"line_start":597,"line_end":597,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71084,"byte_end":71087,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71092,"byte_end":71165,"line_start":599,"line_end":599,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71170,"byte_end":71237,"line_start":600,"line_end":600,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71242,"byte_end":71275,"line_start":601,"line_end":601,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71280,"byte_end":71289,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71969,"byte_end":71993,"line_start":622,"line_end":622,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71632,"byte_end":71709,"line_start":615,"line_end":615,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71714,"byte_end":71729,"line_start":616,"line_end":616,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71734,"byte_end":71737,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71742,"byte_end":71813,"line_start":618,"line_end":618,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71818,"byte_end":71889,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71894,"byte_end":71943,"line_start":620,"line_end":620,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71948,"byte_end":71957,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73121,"byte_end":73136,"line_start":657,"line_end":657,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72643,"byte_end":72723,"line_start":647,"line_end":647,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72728,"byte_end":72757,"line_start":648,"line_end":648,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72762,"byte_end":72765,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72770,"byte_end":72849,"line_start":650,"line_end":650,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72854,"byte_end":72932,"line_start":651,"line_end":651,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72937,"byte_end":72982,"line_start":652,"line_end":652,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72987,"byte_end":72990,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72995,"byte_end":73067,"line_start":654,"line_end":654,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73072,"byte_end":73095,"line_start":655,"line_end":655,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73100,"byte_end":73109,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73663,"byte_end":73682,"line_start":671,"line_end":671,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73325,"byte_end":73391,"line_start":663,"line_end":663,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73396,"byte_end":73399,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73404,"byte_end":73481,"line_start":665,"line_end":665,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73486,"byte_end":73563,"line_start":666,"line_end":666,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73568,"byte_end":73591,"line_start":667,"line_end":667,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73596,"byte_end":73599,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73604,"byte_end":73637,"line_start":669,"line_end":669,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73642,"byte_end":73651,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74345,"byte_end":74368,"line_start":689,"line_end":689,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74004,"byte_end":74085,"line_start":682,"line_end":682,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74090,"byte_end":74105,"line_start":683,"line_end":683,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74110,"byte_end":74113,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74118,"byte_end":74189,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74194,"byte_end":74265,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74270,"byte_end":74319,"line_start":687,"line_end":687,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74324,"byte_end":74333,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75028,"byte_end":75053,"line_start":708,"line_end":708,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74687,"byte_end":74768,"line_start":701,"line_end":701,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74773,"byte_end":74788,"line_start":702,"line_end":702,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74793,"byte_end":74796,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74801,"byte_end":74872,"line_start":704,"line_end":704,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74877,"byte_end":74948,"line_start":705,"line_end":705,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74953,"byte_end":75002,"line_start":706,"line_end":706,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75007,"byte_end":75016,"line_start":707,"line_end":707,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76526,"byte_end":76541,"line_start":758,"line_end":758,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76368,"byte_end":76440,"line_start":755,"line_end":755,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76441,"byte_end":76453,"line_start":756,"line_end":756,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76454,"byte_end":76514,"line_start":757,"line_end":757,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76907,"byte_end":76913,"line_start":767,"line_end":767,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76829,"byte_end":76895,"line_start":766,"line_end":766,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77393,"byte_end":77396,"line_start":780,"line_end":780,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76974,"byte_end":77048,"line_start":771,"line_end":771,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77053,"byte_end":77056,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77061,"byte_end":77123,"line_start":773,"line_end":773,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77128,"byte_end":77159,"line_start":774,"line_end":774,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77164,"byte_end":77167,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77172,"byte_end":77223,"line_start":776,"line_end":776,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77228,"byte_end":77309,"line_start":777,"line_end":777,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77314,"byte_end":77367,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77372,"byte_end":77381,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78240,"byte_end":78247,"line_start":804,"line_end":804,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77740,"byte_end":77814,"line_start":794,"line_end":794,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77819,"byte_end":77895,"line_start":795,"line_end":795,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77900,"byte_end":77903,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77908,"byte_end":77970,"line_start":797,"line_end":797,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77975,"byte_end":78006,"line_start":798,"line_end":798,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78011,"byte_end":78014,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78019,"byte_end":78070,"line_start":800,"line_end":800,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78075,"byte_end":78156,"line_start":801,"line_end":801,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78161,"byte_end":78214,"line_start":802,"line_end":802,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78219,"byte_end":78228,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78999,"byte_end":79007,"line_start":828,"line_end":828,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78702,"byte_end":78769,"line_start":821,"line_end":821,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78774,"byte_end":78777,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78782,"byte_end":78834,"line_start":823,"line_end":823,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78839,"byte_end":78842,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78847,"byte_end":78915,"line_start":825,"line_end":825,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78920,"byte_end":78973,"line_start":826,"line_end":826,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78978,"byte_end":78987,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80065,"byte_end":80076,"line_start":852,"line_end":852,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79264,"byte_end":79318,"line_start":839,"line_end":839,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79323,"byte_end":79326,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79331,"byte_end":79405,"line_start":841,"line_end":841,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79410,"byte_end":79485,"line_start":842,"line_end":842,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79490,"byte_end":79563,"line_start":843,"line_end":843,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79568,"byte_end":79637,"line_start":844,"line_end":844,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79642,"byte_end":79719,"line_start":845,"line_end":845,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79724,"byte_end":79791,"line_start":846,"line_end":846,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79796,"byte_end":79799,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79804,"byte_end":79880,"line_start":848,"line_end":848,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79885,"byte_end":79961,"line_start":849,"line_end":849,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79966,"byte_end":80039,"line_start":850,"line_end":850,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80044,"byte_end":80053,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80463,"byte_end":80476,"line_start":864,"line_end":864,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80166,"byte_end":80233,"line_start":857,"line_end":857,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80238,"byte_end":80241,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80246,"byte_end":80298,"line_start":859,"line_end":859,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80303,"byte_end":80306,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80311,"byte_end":80379,"line_start":861,"line_end":861,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80384,"byte_end":80437,"line_start":862,"line_end":862,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80442,"byte_end":80451,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80960,"byte_end":80964,"line_start":879,"line_end":879,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80660,"byte_end":80732,"line_start":873,"line_end":873,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80737,"byte_end":80740,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80745,"byte_end":80821,"line_start":875,"line_end":875,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80826,"byte_end":80902,"line_start":876,"line_end":876,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80907,"byte_end":80934,"line_start":877,"line_end":877,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80939,"byte_end":80948,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82098,"byte_end":82114,"line_start":919,"line_end":919,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81936,"byte_end":82012,"line_start":916,"line_end":916,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82013,"byte_end":82025,"line_start":917,"line_end":917,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82026,"byte_end":82086,"line_start":918,"line_end":918,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82486,"byte_end":82492,"line_start":928,"line_end":928,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82408,"byte_end":82474,"line_start":927,"line_end":927,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82975,"byte_end":82978,"line_start":941,"line_end":941,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82553,"byte_end":82628,"line_start":932,"line_end":932,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82633,"byte_end":82636,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82641,"byte_end":82704,"line_start":934,"line_end":934,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82709,"byte_end":82740,"line_start":935,"line_end":935,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82745,"byte_end":82748,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82753,"byte_end":82804,"line_start":937,"line_end":937,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82809,"byte_end":82891,"line_start":938,"line_end":938,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82896,"byte_end":82949,"line_start":939,"line_end":939,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82954,"byte_end":82963,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83839,"byte_end":83846,"line_start":965,"line_end":965,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83336,"byte_end":83411,"line_start":955,"line_end":955,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83416,"byte_end":83492,"line_start":956,"line_end":956,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83497,"byte_end":83500,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83505,"byte_end":83568,"line_start":958,"line_end":958,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83573,"byte_end":83604,"line_start":959,"line_end":959,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83609,"byte_end":83612,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83617,"byte_end":83668,"line_start":961,"line_end":961,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83673,"byte_end":83755,"line_start":962,"line_end":962,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83760,"byte_end":83813,"line_start":963,"line_end":963,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83818,"byte_end":83827,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84547,"byte_end":84555,"line_start":987,"line_end":987,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84315,"byte_end":84382,"line_start":982,"line_end":982,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84387,"byte_end":84390,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84395,"byte_end":84463,"line_start":984,"line_end":984,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84468,"byte_end":84521,"line_start":985,"line_end":985,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84526,"byte_end":84535,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85166,"byte_end":85175,"line_start":1004,"line_end":1004,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84824,"byte_end":84900,"line_start":998,"line_end":998,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84905,"byte_end":84970,"line_start":999,"line_end":999,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84975,"byte_end":84978,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84983,"byte_end":85056,"line_start":1001,"line_end":1001,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85061,"byte_end":85134,"line_start":1002,"line_end":1002,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85139,"byte_end":85154,"line_start":1003,"line_end":1003,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85850,"byte_end":85873,"line_start":1022,"line_end":1022,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85496,"byte_end":85584,"line_start":1016,"line_end":1016,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85589,"byte_end":85654,"line_start":1017,"line_end":1017,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85659,"byte_end":85662,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85667,"byte_end":85740,"line_start":1019,"line_end":1019,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85745,"byte_end":85818,"line_start":1020,"line_end":1020,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85823,"byte_end":85838,"line_start":1021,"line_end":1021,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87018,"byte_end":87029,"line_start":1047,"line_end":1047,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86216,"byte_end":86270,"line_start":1034,"line_end":1034,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86275,"byte_end":86278,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86283,"byte_end":86357,"line_start":1036,"line_end":1036,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86362,"byte_end":86437,"line_start":1037,"line_end":1037,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86442,"byte_end":86515,"line_start":1038,"line_end":1038,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86520,"byte_end":86589,"line_start":1039,"line_end":1039,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86594,"byte_end":86671,"line_start":1040,"line_end":1040,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86676,"byte_end":86743,"line_start":1041,"line_end":1041,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86748,"byte_end":86751,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86756,"byte_end":86832,"line_start":1043,"line_end":1043,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86837,"byte_end":86913,"line_start":1044,"line_end":1044,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86918,"byte_end":86992,"line_start":1045,"line_end":1045,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86997,"byte_end":87006,"line_start":1046,"line_end":1046,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87419,"byte_end":87432,"line_start":1059,"line_end":1059,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87122,"byte_end":87189,"line_start":1052,"line_end":1052,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87194,"byte_end":87197,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87202,"byte_end":87254,"line_start":1054,"line_end":1054,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87259,"byte_end":87262,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87267,"byte_end":87335,"line_start":1056,"line_end":1056,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87340,"byte_end":87393,"line_start":1057,"line_end":1057,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87398,"byte_end":87407,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87923,"byte_end":87927,"line_start":1074,"line_end":1074,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87622,"byte_end":87694,"line_start":1068,"line_end":1068,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87699,"byte_end":87702,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87707,"byte_end":87783,"line_start":1070,"line_end":1070,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87788,"byte_end":87865,"line_start":1071,"line_end":1071,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87870,"byte_end":87897,"line_start":1072,"line_end":1072,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87902,"byte_end":87911,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89269,"byte_end":89294,"line_start":1121,"line_end":1121,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89107,"byte_end":89183,"line_start":1118,"line_end":1118,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89184,"byte_end":89196,"line_start":1119,"line_end":1119,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89197,"byte_end":89257,"line_start":1120,"line_end":1120,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89706,"byte_end":89712,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89628,"byte_end":89694,"line_start":1132,"line_end":1132,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90005,"byte_end":90013,"line_start":1142,"line_end":1142,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89773,"byte_end":89840,"line_start":1137,"line_end":1137,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89845,"byte_end":89848,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89853,"byte_end":89921,"line_start":1139,"line_end":1139,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89926,"byte_end":89979,"line_start":1140,"line_end":1140,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89984,"byte_end":89993,"line_start":1141,"line_end":1141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90355,"byte_end":90362,"line_start":1153,"line_end":1153,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90200,"byte_end":90281,"line_start":1151,"line_end":1151,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90286,"byte_end":90343,"line_start":1152,"line_end":1152,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90789,"byte_end":90800,"line_start":1166,"line_end":1166,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90592,"byte_end":90676,"line_start":1163,"line_end":1163,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90681,"byte_end":90684,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90689,"byte_end":90777,"line_start":1165,"line_end":1165,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92032,"byte_end":92043,"line_start":1194,"line_end":1194,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91221,"byte_end":91275,"line_start":1181,"line_end":1181,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91280,"byte_end":91283,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91288,"byte_end":91362,"line_start":1183,"line_end":1183,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91367,"byte_end":91442,"line_start":1184,"line_end":1184,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91447,"byte_end":91520,"line_start":1185,"line_end":1185,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91525,"byte_end":91594,"line_start":1186,"line_end":1186,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91599,"byte_end":91676,"line_start":1187,"line_end":1187,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91681,"byte_end":91748,"line_start":1188,"line_end":1188,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91753,"byte_end":91756,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91761,"byte_end":91837,"line_start":1190,"line_end":1190,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91842,"byte_end":91918,"line_start":1191,"line_end":1191,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91923,"byte_end":92006,"line_start":1192,"line_end":1192,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92011,"byte_end":92020,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92434,"byte_end":92447,"line_start":1206,"line_end":1206,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92137,"byte_end":92204,"line_start":1199,"line_end":1199,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92209,"byte_end":92212,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92217,"byte_end":92269,"line_start":1201,"line_end":1201,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92274,"byte_end":92277,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92282,"byte_end":92350,"line_start":1203,"line_end":1203,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92355,"byte_end":92408,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92413,"byte_end":92422,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92950,"byte_end":92954,"line_start":1221,"line_end":1221,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92639,"byte_end":92711,"line_start":1215,"line_end":1215,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92716,"byte_end":92719,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92724,"byte_end":92800,"line_start":1217,"line_end":1217,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92805,"byte_end":92892,"line_start":1218,"line_end":1218,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92897,"byte_end":92924,"line_start":1219,"line_end":1219,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92929,"byte_end":92938,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93495,"byte_end":93504,"line_start":1234,"line_end":1234,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93122,"byte_end":93200,"line_start":1227,"line_end":1227,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93205,"byte_end":93281,"line_start":1228,"line_end":1228,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93286,"byte_end":93299,"line_start":1229,"line_end":1229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93304,"byte_end":93307,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93312,"byte_end":93385,"line_start":1231,"line_end":1231,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93390,"byte_end":93463,"line_start":1232,"line_end":1232,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93468,"byte_end":93483,"line_start":1233,"line_end":1233,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94096,"byte_end":94111,"line_start":1251,"line_end":1251,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93841,"byte_end":93913,"line_start":1246,"line_end":1246,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93918,"byte_end":93961,"line_start":1247,"line_end":1247,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93966,"byte_end":93969,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93974,"byte_end":94045,"line_start":1249,"line_end":1249,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94050,"byte_end":94084,"line_start":1250,"line_end":1250,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94762,"byte_end":94779,"line_start":1273,"line_end":1273,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94493,"byte_end":94565,"line_start":1267,"line_end":1267,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94570,"byte_end":94613,"line_start":1268,"line_end":1268,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94618,"byte_end":94621,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94626,"byte_end":94697,"line_start":1270,"line_end":1270,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94702,"byte_end":94736,"line_start":1271,"line_end":1271,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94741,"byte_end":94750,"line_start":1272,"line_end":1272,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96624,"byte_end":96645,"line_start":1335,"line_end":1335,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96168,"byte_end":96252,"line_start":1327,"line_end":1327,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96253,"byte_end":96288,"line_start":1328,"line_end":1328,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96289,"byte_end":96292,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96293,"byte_end":96382,"line_start":1330,"line_end":1330,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96383,"byte_end":96458,"line_start":1331,"line_end":1331,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96459,"byte_end":96539,"line_start":1332,"line_end":1332,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96540,"byte_end":96551,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96552,"byte_end":96612,"line_start":1334,"line_end":1334,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97491,"byte_end":97494,"line_start":1357,"line_end":1357,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97060,"byte_end":97134,"line_start":1348,"line_end":1348,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97139,"byte_end":97142,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97147,"byte_end":97215,"line_start":1350,"line_end":1350,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97220,"byte_end":97251,"line_start":1351,"line_end":1351,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97256,"byte_end":97259,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97264,"byte_end":97315,"line_start":1353,"line_end":1353,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97320,"byte_end":97407,"line_start":1354,"line_end":1354,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97412,"byte_end":97465,"line_start":1355,"line_end":1355,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97470,"byte_end":97479,"line_start":1356,"line_end":1356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98329,"byte_end":98336,"line_start":1381,"line_end":1381,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97817,"byte_end":97891,"line_start":1371,"line_end":1371,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97896,"byte_end":97972,"line_start":1372,"line_end":1372,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97977,"byte_end":97980,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97985,"byte_end":98053,"line_start":1374,"line_end":1374,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98058,"byte_end":98089,"line_start":1375,"line_end":1375,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98094,"byte_end":98097,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98102,"byte_end":98153,"line_start":1377,"line_end":1377,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98158,"byte_end":98245,"line_start":1378,"line_end":1378,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98250,"byte_end":98303,"line_start":1379,"line_end":1379,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98308,"byte_end":98317,"line_start":1380,"line_end":1380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99661,"byte_end":99672,"line_start":1413,"line_end":1413,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98854,"byte_end":98908,"line_start":1400,"line_end":1400,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98913,"byte_end":98916,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98921,"byte_end":98995,"line_start":1402,"line_end":1402,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99000,"byte_end":99075,"line_start":1403,"line_end":1403,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99080,"byte_end":99153,"line_start":1404,"line_end":1404,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99158,"byte_end":99227,"line_start":1405,"line_end":1405,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99232,"byte_end":99309,"line_start":1406,"line_end":1406,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99314,"byte_end":99381,"line_start":1407,"line_end":1407,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99386,"byte_end":99389,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99394,"byte_end":99470,"line_start":1409,"line_end":1409,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99475,"byte_end":99551,"line_start":1410,"line_end":1410,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99556,"byte_end":99635,"line_start":1411,"line_end":1411,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99640,"byte_end":99649,"line_start":1412,"line_end":1412,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":795},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101142,"byte_end":101164,"line_start":1464,"line_end":1464,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100682,"byte_end":100768,"line_start":1456,"line_end":1456,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100769,"byte_end":100804,"line_start":1457,"line_end":1457,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100805,"byte_end":100808,"line_start":1458,"line_end":1458,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100809,"byte_end":100900,"line_start":1459,"line_end":1459,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100901,"byte_end":100976,"line_start":1460,"line_end":1460,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100977,"byte_end":101057,"line_start":1461,"line_end":1461,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101058,"byte_end":101069,"line_start":1462,"line_end":1462,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101070,"byte_end":101130,"line_start":1463,"line_end":1463,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102023,"byte_end":102026,"line_start":1489,"line_end":1489,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101589,"byte_end":101664,"line_start":1480,"line_end":1480,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101669,"byte_end":101672,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101677,"byte_end":101746,"line_start":1482,"line_end":1482,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101751,"byte_end":101782,"line_start":1483,"line_end":1483,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101787,"byte_end":101790,"line_start":1484,"line_end":1484,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101795,"byte_end":101846,"line_start":1485,"line_end":1485,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101851,"byte_end":101939,"line_start":1486,"line_end":1486,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101944,"byte_end":101997,"line_start":1487,"line_end":1487,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102002,"byte_end":102011,"line_start":1488,"line_end":1488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102878,"byte_end":102885,"line_start":1513,"line_end":1513,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102363,"byte_end":102438,"line_start":1503,"line_end":1503,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102443,"byte_end":102519,"line_start":1504,"line_end":1504,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102524,"byte_end":102527,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102532,"byte_end":102601,"line_start":1506,"line_end":1506,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102606,"byte_end":102637,"line_start":1507,"line_end":1507,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102642,"byte_end":102645,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102650,"byte_end":102701,"line_start":1509,"line_end":1509,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102706,"byte_end":102794,"line_start":1510,"line_end":1510,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102799,"byte_end":102852,"line_start":1511,"line_end":1511,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102857,"byte_end":102866,"line_start":1512,"line_end":1512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103907,"byte_end":103916,"line_start":1542,"line_end":1542,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103423,"byte_end":103499,"line_start":1532,"line_end":1532,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103504,"byte_end":103569,"line_start":1533,"line_end":1533,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103574,"byte_end":103577,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103582,"byte_end":103655,"line_start":1535,"line_end":1535,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103660,"byte_end":103733,"line_start":1536,"line_end":1536,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103738,"byte_end":103753,"line_start":1537,"line_end":1537,"column_start":5,"column_end":20}},{"value":"deprecated(since = \"0.3.3\", note =\n             \"This function is unsound and will be removed in the future, see issue #198\")","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103758,"byte_end":103895,"line_start":1538,"line_end":1541,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105080,"byte_end":105091,"line_start":1569,"line_end":1569,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104272,"byte_end":104326,"line_start":1556,"line_end":1556,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104331,"byte_end":104334,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104339,"byte_end":104413,"line_start":1558,"line_end":1558,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104418,"byte_end":104493,"line_start":1559,"line_end":1559,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104498,"byte_end":104571,"line_start":1560,"line_end":1560,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104576,"byte_end":104645,"line_start":1561,"line_end":1561,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104650,"byte_end":104727,"line_start":1562,"line_end":1562,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104732,"byte_end":104799,"line_start":1563,"line_end":1563,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104804,"byte_end":104807,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104812,"byte_end":104888,"line_start":1565,"line_end":1565,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104893,"byte_end":104969,"line_start":1566,"line_end":1566,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104974,"byte_end":105054,"line_start":1567,"line_end":1567,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105059,"byte_end":105068,"line_start":1568,"line_end":1568,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7776,"byte_end":7781,"line_start":102,"line_end":102,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7850,"byte_end":7855,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7887,"byte_end":7892,"line_start":105,"line_end":105,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8588,"byte_end":8593,"line_start":133,"line_end":133,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11446,"byte_end":11451,"line_start":218,"line_end":218,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12103,"byte_end":12108,"line_start":236,"line_end":236,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13309,"byte_end":13314,"line_start":268,"line_end":268,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13452,"byte_end":13457,"line_start":275,"line_end":275,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13603,"byte_end":13608,"line_start":282,"line_end":282,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13897,"byte_end":13914,"line_start":288,"line_end":288,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15407,"byte_end":15417,"line_start":342,"line_end":342,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15475,"byte_end":15485,"line_start":344,"line_end":344,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17781,"byte_end":17791,"line_start":415,"line_end":415,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19565,"byte_end":19575,"line_start":461,"line_end":461,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19759,"byte_end":19769,"line_start":469,"line_end":469,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19944,"byte_end":19954,"line_start":476,"line_end":476,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20119,"byte_end":20129,"line_start":483,"line_end":483,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20325,"byte_end":20335,"line_start":489,"line_end":489,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21201,"byte_end":21217,"line_start":513,"line_end":513,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21291,"byte_end":21307,"line_start":516,"line_end":516,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21397,"byte_end":21413,"line_start":521,"line_end":521,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23167,"byte_end":23183,"line_start":573,"line_end":573,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24119,"byte_end":24135,"line_start":593,"line_end":593,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24307,"byte_end":24323,"line_start":601,"line_end":601,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24486,"byte_end":24502,"line_start":608,"line_end":608,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24661,"byte_end":24677,"line_start":615,"line_end":615,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24877,"byte_end":24893,"line_start":622,"line_end":622,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26909,"byte_end":26926,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28155,"byte_end":28172,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28778,"byte_end":28795,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29777,"byte_end":29791,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29891,"byte_end":29905,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29957,"byte_end":29971,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31116,"byte_end":31130,"line_start":200,"line_end":200,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34193,"byte_end":34207,"line_start":286,"line_end":286,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34896,"byte_end":34910,"line_start":304,"line_end":304,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36154,"byte_end":36168,"line_start":336,"line_end":336,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36346,"byte_end":36360,"line_start":343,"line_end":343,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36546,"byte_end":36560,"line_start":350,"line_end":350,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36912,"byte_end":36929,"line_start":359,"line_end":359,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38577,"byte_end":38596,"line_start":416,"line_end":416,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38679,"byte_end":38698,"line_start":420,"line_end":420,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41161,"byte_end":41180,"line_start":495,"line_end":495,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42993,"byte_end":43012,"line_start":543,"line_end":543,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43222,"byte_end":43241,"line_start":553,"line_end":553,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43436,"byte_end":43455,"line_start":562,"line_end":562,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43679,"byte_end":43698,"line_start":570,"line_end":570,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44714,"byte_end":44739,"line_start":598,"line_end":598,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44826,"byte_end":44851,"line_start":603,"line_end":603,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46723,"byte_end":46748,"line_start":660,"line_end":660,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47721,"byte_end":47746,"line_start":682,"line_end":682,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47942,"byte_end":47967,"line_start":692,"line_end":692,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48154,"byte_end":48179,"line_start":701,"line_end":701,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48403,"byte_end":48428,"line_start":709,"line_end":709,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59035,"byte_end":59041,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59118,"byte_end":59124,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59157,"byte_end":59163,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59914,"byte_end":59920,"line_start":300,"line_end":300,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64993,"byte_end":64999,"line_start":447,"line_end":447,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66338,"byte_end":66344,"line_start":481,"line_end":481,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68926,"byte_end":68932,"line_start":547,"line_end":547,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70749,"byte_end":70755,"line_start":591,"line_end":591,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72338,"byte_end":72344,"line_start":635,"line_end":635,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73985,"byte_end":73991,"line_start":681,"line_end":681,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75423,"byte_end":75429,"line_start":721,"line_end":721,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75570,"byte_end":75576,"line_start":728,"line_end":728,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75725,"byte_end":75731,"line_start":735,"line_end":735,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76021,"byte_end":76038,"line_start":741,"line_end":741,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76723,"byte_end":76738,"line_start":763,"line_end":763,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76797,"byte_end":76812,"line_start":765,"line_end":765,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79232,"byte_end":79247,"line_start":838,"line_end":838,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81080,"byte_end":81095,"line_start":884,"line_end":884,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81277,"byte_end":81292,"line_start":892,"line_end":892,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81466,"byte_end":81481,"line_start":899,"line_end":899,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81682,"byte_end":81697,"line_start":906,"line_end":906,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82300,"byte_end":82316,"line_start":924,"line_end":924,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82375,"byte_end":82391,"line_start":926,"line_end":926,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84791,"byte_end":84807,"line_start":997,"line_end":997,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85463,"byte_end":85479,"line_start":1015,"line_end":1015,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86183,"byte_end":86199,"line_start":1033,"line_end":1033,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88046,"byte_end":88062,"line_start":1079,"line_end":1079,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88248,"byte_end":88264,"line_start":1087,"line_end":1087,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88441,"byte_end":88457,"line_start":1094,"line_end":1094,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88634,"byte_end":88650,"line_start":1101,"line_end":1101,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88851,"byte_end":88867,"line_start":1108,"line_end":1108,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89494,"byte_end":89519,"line_start":1127,"line_end":1127,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89586,"byte_end":89611,"line_start":1131,"line_end":1131,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91179,"byte_end":91204,"line_start":1180,"line_end":1180,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93080,"byte_end":93105,"line_start":1226,"line_end":1226,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93799,"byte_end":93824,"line_start":1245,"line_end":1245,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95221,"byte_end":95246,"line_start":1290,"line_end":1290,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95435,"byte_end":95460,"line_start":1298,"line_end":1298,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95649,"byte_end":95674,"line_start":1306,"line_end":1306,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95882,"byte_end":95907,"line_start":1314,"line_end":1314,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96815,"byte_end":96836,"line_start":1341,"line_end":1341,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96910,"byte_end":96931,"line_start":1342,"line_end":1342,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97022,"byte_end":97043,"line_start":1347,"line_end":1347,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98816,"byte_end":98837,"line_start":1399,"line_end":1399,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99807,"byte_end":99828,"line_start":1419,"line_end":1419,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99997,"byte_end":100018,"line_start":1427,"line_end":1427,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100189,"byte_end":100210,"line_start":1435,"line_end":1435,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100411,"byte_end":100432,"line_start":1443,"line_end":1443,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101340,"byte_end":101362,"line_start":1471,"line_end":1471,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101437,"byte_end":101459,"line_start":1474,"line_end":1474,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101550,"byte_end":101572,"line_start":1479,"line_end":1479,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103384,"byte_end":103406,"line_start":1531,"line_end":1531,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104233,"byte_end":104255,"line_start":1555,"line_end":1555,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105229,"byte_end":105251,"line_start":1575,"line_end":1575,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105424,"byte_end":105446,"line_start":1583,"line_end":1583,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105610,"byte_end":105632,"line_start":1590,"line_end":1590,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105806,"byte_end":105828,"line_start":1598,"line_end":1598,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":106029,"byte_end":106051,"line_start":1606,"line_end":1606,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6035,"byte_end":6043,"line_start":56,"line_end":56,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6731,"byte_end":6739,"line_start":75,"line_end":75,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7776,"byte_end":7781,"line_start":102,"line_end":102,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7850,"byte_end":7855,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7887,"byte_end":7892,"line_start":105,"line_end":105,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8588,"byte_end":8593,"line_start":133,"line_end":133,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11446,"byte_end":11451,"line_start":218,"line_end":218,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12103,"byte_end":12108,"line_start":236,"line_end":236,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13309,"byte_end":13314,"line_start":268,"line_end":268,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13452,"byte_end":13457,"line_start":275,"line_end":275,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1778}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13603,"byte_end":13608,"line_start":282,"line_end":282,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13897,"byte_end":13914,"line_start":288,"line_end":288,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15407,"byte_end":15417,"line_start":342,"line_end":342,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15475,"byte_end":15485,"line_start":344,"line_end":344,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17781,"byte_end":17791,"line_start":415,"line_end":415,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19565,"byte_end":19575,"line_start":461,"line_end":461,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19759,"byte_end":19769,"line_start":469,"line_end":469,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19944,"byte_end":19954,"line_start":476,"line_end":476,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20119,"byte_end":20129,"line_start":483,"line_end":483,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20325,"byte_end":20335,"line_start":489,"line_end":489,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21201,"byte_end":21217,"line_start":513,"line_end":513,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21291,"byte_end":21307,"line_start":516,"line_end":516,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21397,"byte_end":21413,"line_start":521,"line_end":521,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23167,"byte_end":23183,"line_start":573,"line_end":573,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24119,"byte_end":24135,"line_start":593,"line_end":593,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24307,"byte_end":24323,"line_start":601,"line_end":601,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24486,"byte_end":24502,"line_start":608,"line_end":608,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24661,"byte_end":24677,"line_start":615,"line_end":615,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24877,"byte_end":24893,"line_start":622,"line_end":622,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26909,"byte_end":26926,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28155,"byte_end":28172,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28778,"byte_end":28795,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29777,"byte_end":29791,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29891,"byte_end":29905,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29957,"byte_end":29971,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31116,"byte_end":31130,"line_start":200,"line_end":200,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34193,"byte_end":34207,"line_start":286,"line_end":286,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34896,"byte_end":34910,"line_start":304,"line_end":304,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36154,"byte_end":36168,"line_start":336,"line_end":336,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36346,"byte_end":36360,"line_start":343,"line_end":343,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1778}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36546,"byte_end":36560,"line_start":350,"line_end":350,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36912,"byte_end":36929,"line_start":359,"line_end":359,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38577,"byte_end":38596,"line_start":416,"line_end":416,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38679,"byte_end":38698,"line_start":420,"line_end":420,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41161,"byte_end":41180,"line_start":495,"line_end":495,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42993,"byte_end":43012,"line_start":543,"line_end":543,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43222,"byte_end":43241,"line_start":553,"line_end":553,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43436,"byte_end":43455,"line_start":562,"line_end":562,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43679,"byte_end":43698,"line_start":570,"line_end":570,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44714,"byte_end":44739,"line_start":598,"line_end":598,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44826,"byte_end":44851,"line_start":603,"line_end":603,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46723,"byte_end":46748,"line_start":660,"line_end":660,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47721,"byte_end":47746,"line_start":682,"line_end":682,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47942,"byte_end":47967,"line_start":692,"line_end":692,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48154,"byte_end":48179,"line_start":701,"line_end":701,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48403,"byte_end":48428,"line_start":709,"line_end":709,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51235,"byte_end":51244,"line_start":67,"line_end":67,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":445}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52400,"byte_end":52409,"line_start":97,"line_end":97,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":450}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52832,"byte_end":52841,"line_start":107,"line_end":107,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":452}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53961,"byte_end":53970,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":459}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54360,"byte_end":54378,"line_start":143,"line_end":143,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":459},"to":{"krate":0,"index":462}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54381,"byte_end":54395,"line_start":143,"line_end":143,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":462}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55163,"byte_end":55172,"line_start":159,"line_end":159,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":465}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55822,"byte_end":55838,"line_start":179,"line_end":179,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55841,"byte_end":55854,"line_start":179,"line_end":179,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56517,"byte_end":56533,"line_start":196,"line_end":196,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":474}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56536,"byte_end":56554,"line_start":196,"line_end":196,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":450},"to":{"krate":0,"index":474}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56889,"byte_end":56905,"line_start":206,"line_end":206,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56908,"byte_end":56922,"line_start":206,"line_end":206,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59035,"byte_end":59041,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59118,"byte_end":59124,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59157,"byte_end":59163,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59914,"byte_end":59920,"line_start":300,"line_end":300,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64993,"byte_end":64999,"line_start":447,"line_end":447,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66338,"byte_end":66344,"line_start":481,"line_end":481,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68926,"byte_end":68932,"line_start":547,"line_end":547,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70749,"byte_end":70755,"line_start":591,"line_end":591,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72338,"byte_end":72344,"line_start":635,"line_end":635,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73985,"byte_end":73991,"line_start":681,"line_end":681,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75423,"byte_end":75429,"line_start":721,"line_end":721,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75570,"byte_end":75576,"line_start":728,"line_end":728,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1778}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75725,"byte_end":75731,"line_start":735,"line_end":735,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76021,"byte_end":76038,"line_start":741,"line_end":741,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76723,"byte_end":76738,"line_start":763,"line_end":763,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76797,"byte_end":76812,"line_start":765,"line_end":765,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79232,"byte_end":79247,"line_start":838,"line_end":838,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81080,"byte_end":81095,"line_start":884,"line_end":884,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81277,"byte_end":81292,"line_start":892,"line_end":892,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81466,"byte_end":81481,"line_start":899,"line_end":899,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81682,"byte_end":81697,"line_start":906,"line_end":906,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82300,"byte_end":82316,"line_start":924,"line_end":924,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82375,"byte_end":82391,"line_start":926,"line_end":926,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84791,"byte_end":84807,"line_start":997,"line_end":997,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85463,"byte_end":85479,"line_start":1015,"line_end":1015,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86183,"byte_end":86199,"line_start":1033,"line_end":1033,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88046,"byte_end":88062,"line_start":1079,"line_end":1079,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88248,"byte_end":88264,"line_start":1087,"line_end":1087,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88441,"byte_end":88457,"line_start":1094,"line_end":1094,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88634,"byte_end":88650,"line_start":1101,"line_end":1101,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88851,"byte_end":88867,"line_start":1108,"line_end":1108,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89494,"byte_end":89519,"line_start":1127,"line_end":1127,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89586,"byte_end":89611,"line_start":1131,"line_end":1131,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91179,"byte_end":91204,"line_start":1180,"line_end":1180,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93080,"byte_end":93105,"line_start":1226,"line_end":1226,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93799,"byte_end":93824,"line_start":1245,"line_end":1245,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95221,"byte_end":95246,"line_start":1290,"line_end":1290,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95435,"byte_end":95460,"line_start":1298,"line_end":1298,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95649,"byte_end":95674,"line_start":1306,"line_end":1306,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95882,"byte_end":95907,"line_start":1314,"line_end":1314,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96815,"byte_end":96836,"line_start":1341,"line_end":1341,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96910,"byte_end":96931,"line_start":1342,"line_end":1342,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97022,"byte_end":97043,"line_start":1347,"line_end":1347,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98816,"byte_end":98837,"line_start":1399,"line_end":1399,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99807,"byte_end":99828,"line_start":1419,"line_end":1419,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99997,"byte_end":100018,"line_start":1427,"line_end":1427,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100189,"byte_end":100210,"line_start":1435,"line_end":1435,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100411,"byte_end":100432,"line_start":1443,"line_end":1443,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":5930}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101340,"byte_end":101362,"line_start":1471,"line_end":1471,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1866}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101437,"byte_end":101459,"line_start":1474,"line_end":1474,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1854}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101550,"byte_end":101572,"line_start":1479,"line_end":1479,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103384,"byte_end":103406,"line_start":1531,"line_end":1531,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104233,"byte_end":104255,"line_start":1555,"line_end":1555,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105229,"byte_end":105251,"line_start":1575,"line_end":1575,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2025}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105424,"byte_end":105446,"line_start":1583,"line_end":1583,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105610,"byte_end":105632,"line_start":1590,"line_end":1590,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":2047}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105806,"byte_end":105828,"line_start":1598,"line_end":1598,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":5925}},{"span":{"file_name":"/home/aprokruov/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":106029,"byte_end":106051,"line_start":1606,"line_end":1606,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":5930}}]}